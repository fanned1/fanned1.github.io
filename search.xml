<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript基础</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="javascript基础"><a href="#javascript基础" class="headerlink" title="javascript基础"></a>javascript基础</h1><h2 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h2><ol><li>async：立即异步<strong>下载</strong>，不保证按出现顺序执行（只对外部文件有效）</li><li>defer：立即下载，延迟到文档解析和显示之后<strong>执行</strong>（只对外部文件有效）</li><li>type: module：会被当做es6模块</li></ol><h2 id="var-let-const的区别"><a href="#var-let-const的区别" class="headerlink" title="var\let\const的区别"></a>var\let\const的区别</h2><ol><li>var有声明提升，let和const没有，因此let和const就有了暂时性死区</li><li>var的作用域是函数，let和const的作用域是块</li><li>var和let是变量，const是常量必须在声明时初始化</li><li>var定义的全局变量会成为window的属性，而let和const则不会</li><li>var可以重复声明，let和const则不可以</li></ol><h2 id="判断变量是否是数组"><a href="#判断变量是否是数组" class="headerlink" title="判断变量是否是数组"></a>判断变量是否是数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="comment">// 通过原型中的构造函数判断</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(arr).<span class="property">constructor</span> === <span class="title class_">Array</span></span><br><span class="line"><span class="comment">// 判断是不是数组的构造函数创建的对象</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="6种基本类型"><a href="#6种基本类型" class="headerlink" title="6种基本类型"></a>6种基本类型</h4><ol><li><p>Number</p></li><li><p>Boolean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">转换为<span class="literal">false</span>的值：</span><br><span class="line"><span class="number">1.</span> <span class="literal">false</span></span><br><span class="line"><span class="number">2.</span> <span class="string">&quot;&quot;</span> <span class="comment">//空字符串</span></span><br><span class="line"><span class="number">3.</span> <span class="number">0</span>、<span class="title class_">NaN</span></span><br><span class="line"><span class="number">4.</span> <span class="literal">null</span></span><br><span class="line"><span class="number">5.</span> <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">逻辑操作符</span><br><span class="line">&amp;&amp; 第一个为<span class="literal">false</span>，返回第一个；否则返回第二个</span><br><span class="line">|| 其中一个为<span class="literal">false</span>，则返回它；否则返回第二个</span><br></pre></td></tr></table></figure></li><li><p>String</p></li><li><p>Null</p></li><li><p>Undefined</p></li><li><p>Symbol 符号是原始值，是唯一、不可变的，用来标识唯一的对象属性，一般是js开发者定义功能使用。</p></li></ol><h4 id="1种引用类型"><a href="#1种引用类型" class="headerlink" title="1种引用类型"></a>1种引用类型</h4><ol><li>Object</li></ol><h2 id="函数定义调用和上下文创建的关系"><a href="#函数定义调用和上下文创建的关系" class="headerlink" title="函数定义调用和上下文创建的关系"></a>函数定义调用和上下文创建的关系</h2><h3 id="执行上下文是什么？（全局上下文、函数上下文、eval-创建的上下文）"><a href="#执行上下文是什么？（全局上下文、函数上下文、eval-创建的上下文）" class="headerlink" title="执行上下文是什么？（全局上下文、函数上下文、eval()创建的上下文）"></a>执行上下文是什么？（全局上下文、函数上下文、eval()创建的上下文）</h3><p>执行上下文就是代码执行的环境，规定了上下文中的变量和函数能访问哪些数据。</p><h3 id="函数在定义和调用的时候发生了什么"><a href="#函数在定义和调用的时候发生了什么" class="headerlink" title="函数在定义和调用的时候发生了什么"></a>函数在定义和调用的时候发生了什么</h3><h4 id="1-函数定义"><a href="#1-函数定义" class="headerlink" title="1. 函数定义"></a>1. 函数定义</h4><p>函数定义的时候，会创建它的作用域链，预装载包含上下文的作用域链，存放在[[scope]]内部属性中</p><h4 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2. 函数调用"></a>2. 函数调用</h4><p>函数调用时，会创建该函数的执行上下文；然后通过复制[[scope]]来创建函数的作用域链；接着到了预编译阶段，会创建函数的活动对象作为变量对象，并将它推入作用域链顶端。</p><h3 id="创建执行上下文的时候会发生什么"><a href="#创建执行上下文的时候会发生什么" class="headerlink" title="创建执行上下文的时候会发生什么"></a>创建执行上下文的时候会发生什么</h3><h4 id="1-this绑定"><a href="#1-this绑定" class="headerlink" title="1. this绑定"></a>1. this绑定</h4><ol><li>this绑定又分为直接调用和对象调用；</li><li>直接调用this一般等于window（严格模式除外），对象调用this一般等于该对象。</li></ol><h4 id="2-创建词法环境"><a href="#2-创建词法环境" class="headerlink" title="2. 创建词法环境"></a>2. 创建词法环境</h4><ol><li>词法环境其实就是包含标识符和变量映射关系的一种结构。</li><li>es6中用来存储函数和let、const定义的变量的绑定</li><li>包含环境记录和外部环境引用</li></ol><h4 id="3-创建变量环境"><a href="#3-创建变量环境" class="headerlink" title="3. 创建变量环境"></a>3. 创建变量环境</h4><ol><li>变量环境和词法环境十分相似</li><li>在es6中有明显不同，前者用来存储函数和变量(let/const)的绑定</li><li>后者只用来储存var变量的绑定</li></ol><h3 id="函数预编译"><a href="#函数预编译" class="headerlink" title="函数预编译"></a>函数预编译</h3><ol><li>创建活动对象AO</li><li>找到所有var声明的变量和形参声明，去作为活动对象的属性，置为undefined</li><li>实参和形参值相统一</li><li>找到所有函数声明（不是表达式！）去作为活动对象的属性（会覆盖变量声明），然后将函数体赋值给它</li><li>js解释执行</li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="标记清理（常用）"><a href="#标记清理（常用）" class="headerlink" title="标记清理（常用）"></a>标记清理（常用）</h3><p>会标记所有在内存中的变量，然后去掉所有<strong>在上下文中的变量</strong>或<strong>被上下文中变量引用的变量</strong>的标记，之后再有标记的变量就一定不在上下文中，并不能被上下文中的变量访问，随后垃圾回收就会清理这些带标记变量并回收内存。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>对每个值都记录它被引用的次数，如果次数为0，则下一次垃圾回收就会回收这个值的内存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">举个栗子</span><br><span class="line">值：<span class="string">&#x27;value&#x27;</span> 次数cnt：<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;value&#x27;</span> <span class="comment">// cnt ++</span></span><br><span class="line"><span class="keyword">let</span> b = a <span class="comment">// cnt ++</span></span><br><span class="line">a = <span class="string">&#x27;key&#x27;</span><span class="comment">// cnt --</span></span><br><span class="line">b = <span class="string">&#x27;key&#x27;</span><span class="comment">// cnt -- = 0 ‘value’值下次被清理</span></span><br><span class="line"></span><br><span class="line">有个巨大的漏洞-》循环引用</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">problem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> b = &#123;&#125;</span><br><span class="line">    a.<span class="property">next</span> = b</span><br><span class="line">    b.<span class="property">next</span> = a</span><br><span class="line">&#125;</span><br><span class="line">两个&#123;&#125;的引用次数都是<span class="number">2</span></span><br><span class="line">永远不会清<span class="number">0</span>，所有他们会一直在内存中</span><br></pre></td></tr></table></figure><h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><p>本不该在内存中的变量和函数，一直存在于内存中；</p><p>一般就是误定义为全局变量和误使用闭包造成的。</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>只要创建一个函数，就会在函数的prototype属性创建一个原型对象，用于给对象 共享方法和属性。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>如果原型是另一个类型的实例，那么原型也有另一个原型，因此便形成了原型链。</p><p>在一个对象中，如果找不到一个属性或方法，就会去原型对象中找，原型对象也有原型，因此便形成了原型链。</p><h2 id="八大继承"><a href="#八大继承" class="headerlink" title="八大继承"></a>八大继承</h2><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lizhengxin&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">attr</span> = &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">attr</span> === obj1.<span class="property">attr</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">`缺点：</span></span><br><span class="line"><span class="string">1. 在父类构造函数中定义的引用类型属性，是实例间共享的</span></span><br><span class="line"><span class="string">2. 子类实例化时，不能向父类构造函数传参`</span></span><br></pre></td></tr></table></figure><h3 id="2-盗用构造函数"><a href="#2-盗用构造函数" class="headerlink" title="2. 盗用构造函数"></a>2. 盗用构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">attr</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: name ?? <span class="string">&#x27;lizhengxin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">getAttr</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">attr</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;son&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;mayana&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br><span class="line"></span><br><span class="line"><span class="string">`优点：</span></span><br><span class="line"><span class="string">1. 解决了原型链继承的引用值共享问题</span></span><br><span class="line"><span class="string">2. 子类实例化的时候可以给父类构造函数传参了`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`缺点：</span></span><br><span class="line"><span class="string">1. 父类函数只能定义在构造函数内，不能重用</span></span><br><span class="line"><span class="string">2. 不能使用父类原型上的方法和属性`</span></span><br></pre></td></tr></table></figure><h3 id="3-组合继承（原型链-盗用构造函数）"><a href="#3-组合继承（原型链-盗用构造函数）" class="headerlink" title="3. 组合继承（原型链 + 盗用构造函数）"></a>3. 组合继承（原型链 + 盗用构造函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">attr</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: name ?? <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAttr</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">attr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;lizhengxin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;mayana&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">getAttr</span> === obj2.<span class="property">getAttr</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">`优点：</span></span><br><span class="line"><span class="string">1. 父类私有属性定义在构造函数内，共享方法和属性定义在原型上</span></span><br><span class="line"><span class="string">2. 子类可以访问父类原型上的方法和属性`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`缺点：父类构造函数要被调用两次`</span></span><br></pre></td></tr></table></figure><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`在一个对象的基础上，建立一个新对象，相当于给传入的对象只醒了一次浅拷贝`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`缺点：跟原型链模式一样，引用值会共享`</span></span><br></pre></td></tr></table></figure><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnthor</span>(<span class="params">original</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> clone = <span class="title function_">object</span>(original)<span class="comment">// 在原对象基础上，建立一个新对象</span></span><br><span class="line">    clone.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">// 并在原基础上，增强新对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`缺点：</span></span><br><span class="line"><span class="string">1. 引用值会共享</span></span><br><span class="line"><span class="string">2. 函数不能重用`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`为什么叫寄生式继承？</span></span><br><span class="line"><span class="string">我觉得是跟是否功能相同有关，就像原型式继承为什么不叫寄生式？那是因为新对象没有增加功能，和源对象一样，这种应该叫共生；而寄生式继承，新对象被增强了，所以就叫做寄生式，就想电影中的寄生兽一样，它在你的基础上建立，但是它最终会变得比你强！`</span></span><br></pre></td></tr></table></figure><h3 id="6-寄生式组合继承"><a href="#6-寄生式组合继承" class="headerlink" title="6. 寄生式组合继承"></a>6. 寄生式组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inheritPrototype</span>(<span class="params">Father, Son</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title function_">object</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">// 原型式继承父类原型</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = <span class="title class_">Son</span><span class="comment">// 增强</span></span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">attr</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: name || <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAttr</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">attr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Father</span>, <span class="title class_">Son</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;lizhengxin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;mayana&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">`优点：解决了组合继承父类构造函数要调用两次的缺点`</span></span><br></pre></td></tr></table></figure><h3 id="7-类继承类"><a href="#7-类继承类" class="headerlink" title="7. 类继承类"></a>7. 类继承类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="8-类继承构造函数"><a href="#8-类继承构造函数" class="headerlink" title="8. 类继承构造函数"></a>8. 类继承构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="new的过程中发生了什么"><a href="#new的过程中发生了什么" class="headerlink" title="new的过程中发生了什么"></a>new的过程中发生了什么</h2><ol><li>在内存中创建一个新对象</li><li>这个新对象内的原型被赋值为构造函数的prototype原型属性</li><li>构造函数的this被赋值为这个新对象</li><li>逐行执行构造函数内的代码</li><li>如果构造函数返回一个非空对象，则返回这个对象；否则返回刚创建的新对象。</li></ol><h2 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h2><ol><li>箭头函数没有arguments</li><li>箭头函数不能用作构造函数</li><li>箭头函数没有prototype属性</li><li>箭头函数没有this指针，只能使用包含上下文中的this</li><li>箭头函数不能使用new.target，普通函数可以</li></ol><h2 id="期约"><a href="#期约" class="headerlink" title="期约"></a>期约</h2><h3 id="期约的原理就是状态机"><a href="#期约的原理就是状态机" class="headerlink" title="期约的原理就是状态机"></a>期约的原理就是状态机</h3><ol><li>pending，表示未执行或正在执行的过程中</li><li>fulfilled，表示成功的完成</li><li>rejected，表示没有成功的完成</li></ol><p>期约是异步回调地狱的解决方案，在执行器中的报错会自动执行reject(Error)</p><h3 id="promise-all-可迭代对象"><a href="#promise-all-可迭代对象" class="headerlink" title="promise.all(可迭代对象)"></a>promise.all(可迭代对象)</h3><p>在一组promise全部解决后再解决</p><h3 id="promise-race-可迭代对象"><a href="#promise-race-可迭代对象" class="headerlink" title="promise.race(可迭代对象)"></a>promise.race(可迭代对象)</h3><p>在一组promise中只要有一个期约解决或拒绝之后再解决或拒绝，不区分第一个期约是解决或拒绝，只要其中有一个期约落定，rece再之后也会落定</p><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><h3 id="1-事件捕获"><a href="#1-事件捕获" class="headerlink" title="1. 事件捕获"></a>1. 事件捕获</h3><p>事件捕获是指事件从最不具体的元素开始触发，即从层级最浅的元素依次向层级深的元素传递；实际上是为了在到达目标具体元素之前拦截事件。</p><h3 id="2-到达目标"><a href="#2-到达目标" class="headerlink" title="2. 到达目标"></a>2. 到达目标</h3><h3 id="3-事件冒泡"><a href="#3-事件冒泡" class="headerlink" title="3. 事件冒泡"></a>3. 事件冒泡</h3><p>事件冒泡是指事件从最具体的元素开始触发，即从层级最深的元素依次向上传递到层级浅的元素。</p><h2 id="ajax（async-js-and-xml）"><a href="#ajax（async-js-and-xml）" class="headerlink" title="ajax（async js and xml）"></a>ajax（async js and xml）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="keyword">const</span> isAsync = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> requstBody = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()<span class="comment">// 创建xhr实例</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/api/getMsg?id=2&#x27;</span>, isAsync)<span class="comment">// 准备要发送的请求，（method，url，isAsync）</span></span><br><span class="line">xhr.<span class="title function_">send</span>(requestBody)<span class="comment">// 正式发送请求，（请求体，一般post会用到）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> ==<span class="number">304</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> ==<span class="number">304</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/api/getMsg?id=2&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;MyHeader&#x27;</span>, <span class="string">&#x27;MyValue&#x27;</span>)<span class="comment">// 设置请求头部字段，必须在open之后send之前设置</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;....&#x27;</span>) <span class="comment">// 发送请求的时候一定记得设置content-type为自己发送的类型</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进度</span></span><br><span class="line">xhr.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) <span class="comment">// 表示进度信息是否可用</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">position</span> / event.<span class="property">totalSize</span> + <span class="string">&#x27;%&#x27;</span>) <span class="comment">// position表示接收到的字节数</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以取消</span></span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure><h2 id="简单请求和复杂请求-跨域请求才有"><a href="#简单请求和复杂请求-跨域请求才有" class="headerlink" title="简单请求和复杂请求(跨域请求才有)"></a>简单请求和复杂请求(跨域请求才有)</h2><p>浏览器限制，请求发送出去虽然返回结果被浏览器拦截，但是对服务器可能产生了影响；</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>简单请求只能使用get、post、head这三个方法</p><p>简单请求的 HTTP 头只能是 Accept/Accept-Language/Conent-Language/Content-Type 等</p><p>简单请求的 Content-Type 头只能是 text/plain、multipart/form-data 或 application/x-www-form-urlencoded</p><p>不是复杂请求就是简单请求，就发送一次请求</p><h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>不是简单请求就是复杂请求</p><p>复杂请求在第一次发送这种类型的请求时一共会发送两个请求</p><ol><li>预检请求，使用Options方法（返回204），包含头部：Origin（源域名)、Access-Control-Request-Method(请求想要使用的方法)、Access-Control-Request-Headers(请求定义的自定义头部)    </li><li>正式请求</li></ol><h3 id="凭据请求"><a href="#凭据请求" class="headerlink" title="*凭据请求"></a>*凭据请求</h3><p>如果设置请求属性xhr.withCredentials: true，则这个请求也是凭据请求，请求时会带有(cookie、HTTP认证和客户端ssl证书)，当然也要服务端允许带有才行; Access-Control-Allow-Credentials: true这条语句表示服务端允许带有凭据。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ol><li><p>闭包就是引用了其他函数中的变量对象的函数</p></li><li><p>一般发生在嵌套函数，而且内层函数被返回并引用；不返回被引用，则变量对象会被垃圾回收</p></li><li>会导致其他函数的变量对象一直不会销毁</li></ol><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><ol><li>只要是直接调用 func(), 那么this就等于window（严格模式等于undefined）</li><li>只要是对象方法调用，那么this就等于该对象</li><li>call\apply\bind调用则this是第一个参数</li></ol><h2 id="发布订阅者模式"><a href="#发布订阅者模式" class="headerlink" title="发布订阅者模式"></a>发布订阅者模式</h2><ol><li>首先确定谁是发布者</li><li>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者</li><li>最后就是发布消息，遍历缓存列表，依次触发里面存放的订阅者回调函数</li></ol><h1 id="手写js代码"><a href="#手写js代码" class="headerlink" title="手写js代码"></a>手写js代码</h1><h2 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call/apply/bind"></a>call/apply/bind</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myCall</span>(<span class="params">thisPtr, ...params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> thisPtr !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    thisPtr = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  thisPtr.<span class="property">temp</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisPtr.<span class="title function_">temp</span>(...arrParams)</span><br><span class="line">  <span class="keyword">delete</span> thisPtr.<span class="property">temp</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = myCall</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myApply</span>(<span class="params">thisPtr, arrParams</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> thisPtr !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    thisPtr = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  thisPtr.<span class="property">temp</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisPtr.<span class="title function_">temp</span>(...arrParams)</span><br><span class="line">  <span class="keyword">delete</span> thisPtr.<span class="property">temp</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = myApply</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myBind</span>(<span class="params">thisPtr, arrArg</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> thisPtr !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    thisPtr = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arrArg = arrArg || []</span><br><span class="line">  <span class="keyword">const</span> originalFunc = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">bound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 如果new 构造函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> bound) &#123;</span><br><span class="line">      <span class="comment">// 构造函数的 this指针 要指向所创建的对象，就是现在this</span></span><br><span class="line">      thisPtr = <span class="variable language_">this</span></span><br><span class="line">      <span class="comment">// 实例的原型应该被赋值为原来函数的原型</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">__proto__</span> = originalFunc.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> originalFunc.<span class="title function_">myApply</span>(thisPtr, arrArg.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = myBind</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blabla  : &#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&#x27;age : &#x27;</span>, age)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;lizhengxin&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.bind(obj)(20)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bound = test.<span class="title function_">myBind</span>(obj)</span><br><span class="line"><span class="title function_">bound</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title function_">bound</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">gender</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">gender</span>)</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">func, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newObj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    newObj.<span class="property">__proto__</span> = func.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">const</span> res = func.<span class="title function_">call</span>(func, ...args)</span><br><span class="line">    <span class="comment">// 如果构造函数返回非空对象，则返回该对象</span></span><br><span class="line">    <span class="keyword">if</span> (res !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(res).<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">// 否则返回新对象</span></span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromiseAll</span>(<span class="params">arrArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arrArgs)) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是数组&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> len = arrArgs.<span class="property">length</span></span><br><span class="line">        <span class="keyword">const</span> arrAns = []</span><br><span class="line">        arrArgs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// resolve包装一下</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                arrAns[idx] = res</span><br><span class="line">                cnt ++ </span><br><span class="line">                <span class="keyword">if</span> (cnt &gt;= len) <span class="title function_">resolve</span>(arrAns)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromiseRace</span>(<span class="params">arrArg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arrArg)) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是数组&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">        arrArgs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;/api/login&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;lizhengxin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;lizhengxin&#x27;</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray</span>(<span class="params">root</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(root)) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是数组&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> arrAns = []</span><br><span class="line">    root.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) </span><br><span class="line">        &#123;</span><br><span class="line">            arrAns = arrAns.<span class="title function_">concat</span>(<span class="title function_">flattenArray</span>(item))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arrAns.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arrAns</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash方式，O(n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeRepetition</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是数组&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> visit = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> ans = []</span><br><span class="line">    </span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[item] === <span class="literal">undefined</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(item)</span><br><span class="line">            visit[item] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort方式，O(nlogn)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeRepetition</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!i || arr[i] !== arr[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j ++ ] = arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="property">length</span> = j</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听数组改变"><a href="#监听数组改变" class="headerlink" title="监听数组改变"></a>监听数组改变</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reflect = &#123;&#125;</span><br><span class="line">reflect.<span class="property">push</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line">reflect.<span class="property">pop</span> = A</span><br></pre></td></tr></table></figure><h2 id="防抖节流函数"><a href="#防抖节流函数" class="headerlink" title="防抖节流函数"></a>防抖节流函数</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">callback, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">callback</span>(...args) </span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">callback, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(...args)</span><br><span class="line">                timer = <span class="literal">undefined</span></span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h1><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子模型就是容纳html元素的一个容器，有宽高、边距、边框等</p><h3 id="普通盒子-box-sizing-content-box"><a href="#普通盒子-box-sizing-content-box" class="headerlink" title="普通盒子(box-sizing: content-box)"></a>普通盒子(box-sizing: content-box)</h3><p>宽高就是自身的宽高，然后边框和内边距不计算在内</p><h3 id="怪异盒子-box-sizing-border-box"><a href="#怪异盒子-box-sizing-border-box" class="headerlink" title="怪异盒子(box-sizing: border-box)"></a>怪异盒子(box-sizing: border-box)</h3><p>宽高 = 自身宽高 + padding + border</p><h2 id="BFC块级格式化上下文"><a href="#BFC块级格式化上下文" class="headerlink" title="BFC块级格式化上下文"></a>BFC块级格式化上下文</h2><ol><li><p>定义：BFC是一个完全独立渲染的空间，让其子元素不受外部元素的任何影响。</p></li><li><p>作用：用于解决高度塌陷、margin重叠、浮动问题</p></li><li><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> float 不为none 脱离文档流</span><br><span class="line"><span class="number">2.</span> position 是absolute和fixed 脱离文档流</span><br><span class="line"><span class="number">2.</span> display 为inline-block, flex, inline-flex, table, table-cell, inline-table</span><br><span class="line"><span class="number">3.</span> overflow 不为visible</span><br></pre></td></tr></table></figure></li></ol><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="relative-transform-子元素不固定宽高"><a href="#relative-transform-子元素不固定宽高" class="headerlink" title="relative + transform 子元素不固定宽高"></a>relative + transform 子元素不固定宽高</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-子元素不固定宽高"><a href="#flex-子元素不固定宽高" class="headerlink" title="flex 子元素不固定宽高"></a>flex 子元素不固定宽高</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">father</span>&#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    justify-<span class="attr">content</span>: center;</span><br><span class="line">    aligh-<span class="attr">items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flex变异布局"><a href="#flex变异布局" class="headerlink" title="flex变异布局"></a>flex变异布局</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">father</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">son</span> &#123;</span><br><span class="line">    <span class="attr">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="grid-子元素不固定宽高"><a href="#grid-子元素不固定宽高" class="headerlink" title="grid 子元素不固定宽高"></a>grid 子元素不固定宽高</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">father</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: grid;</span><br><span class="line">    justify-<span class="attr">self</span>: center;</span><br><span class="line">    aligh-<span class="attr">self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="grid变异布局"><a href="#grid变异布局" class="headerlink" title="grid变异布局"></a>grid变异布局</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">father</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">son</span> &#123;</span><br><span class="line">    <span class="attr">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="absolute-margin-子元素固定宽高"><a href="#absolute-margin-子元素固定宽高" class="headerlink" title="absolute + margin 子元素固定宽高"></a>absolute + margin 子元素固定宽高</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">father</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">son</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">width</span>: 200px;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    <span class="attr">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><h3 id="float-margin"><a href="#float-margin" class="headerlink" title="float  + margin"></a>float  + margin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">   <span class="attr">float</span>: left;</span><br><span class="line">    <span class="attr">width</span>: 200px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">    margin-<span class="attr">left</span>: 210px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="float-BFC"><a href="#float-BFC" class="headerlink" title="float + BFC"></a>float + BFC</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">    <span class="attr">float</span>: left;</span><br><span class="line">    <span class="attr">width</span>: 200px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">wrapper</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex</span><br><span class="line">    align-<span class="attr">items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">    <span class="attr">width</span>: 200px;</span><br><span class="line">    flex-<span class="attr">shrink</span>: <span class="number">0</span>; <span class="comment">// flex的第二个参数禁止收缩</span></span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">    <span class="attr">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="absolute-margin"><a href="#absolute-margin" class="headerlink" title="absolute+ margin"></a>absolute+ margin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">width</span>: 200px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">    margin-<span class="attr">left</span>: 200px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="absolute-absolute-left"><a href="#absolute-absolute-left" class="headerlink" title="absolute + absolute . left"></a>absolute + absolute . left</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">width</span>: 200px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">   <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">left</span>: 200px;</span><br><span class="line">    <span class="attr">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><h3 id="流体布局-浮动布局-跟-position差不多"><a href="#流体布局-浮动布局-跟-position差不多" class="headerlink" title="流体布局(浮动布局) 跟 position差不多"></a>流体布局(浮动布局) 跟 position差不多</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>; // marin法</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto: // BFC法</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圣杯"><a href="#圣杯" class="headerlink" title="圣杯"></a>圣杯</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">原理：外部盒子给出两栏宽度的padding，三个元素都浮动，通过margin 和 relative 调整两栏变到一行去</span><br><span class="line">缺点：屏幕宽度小于两栏宽度 + padding时，布局会乱</span><br><span class="line">`类书写的顺序，就是元素排版的顺序`</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span></span></span><br><span class="line"><span class="language-css">            margin-left: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双飞翼（完满三栏）"><a href="#双飞翼（完满三栏）" class="headerlink" title="双飞翼（完满三栏）"></a>双飞翼（完满三栏）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">原理：在圣杯的基础上，删去了外部容器的padding，让外部容器宽度100%的浏览器宽度，margin-left参照的宽度变大，因此不需要relative，也就解决了宽度小于两栏宽度+padding时布局会乱的问题（因为relative元素一直在原地）；重点通过在main中加了main-content，使用其margin空出两栏位置</span><br><span class="line"></span><br><span class="line">`类书写的顺序，就是元素排版的顺序`</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.main-content</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><ol><li>!important 是最高优先级</li><li>css将 <strong>行内样式、id选择器、类/伪类/属性选择器、元素/伪元素选择器，按次序划分为一个四位元组(0, 0, 0, 0)</strong>；比如：每多一个类选择器第三位就 + 1，比较方式就是从前向后一次比较，类似字符串比较</li><li>其余就不计算在优先级内</li></ol><h2 id="文字超出省略号"><a href="#文字超出省略号" class="headerlink" title="文字超出省略号"></a>文字超出省略号</h2><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">one</span>-line &#123;</span><br><span class="line"><span class="attr">overflow</span>: hidden;</span><br><span class="line">    text-<span class="attr">overflow</span>: ellipsis;</span><br><span class="line">    white-<span class="attr">space</span>: no-wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">many</span>-lines &#123;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">    <span class="attr">display</span>: -webkit-box;</span><br><span class="line">    -webkit-box-<span class="attr">orient</span>: vertical;</span><br><span class="line">    -webkit-line-<span class="attr">clamp</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="z-index在什么时候有效"><a href="#z-index在什么时候有效" class="headerlink" title="z-index在什么时候有效"></a>z-index在什么时候有效</h2><p>当position被设置为 absolute, fixed, relative, sticky时，元素的层级会变得比普通元素高，同时就可以使用z-index进行层级调整</p><p>注意：</p><ol><li>设置z-index层级只对兄弟节点有效</li><li>当position：sticky时，将z-index设置为&lt;=0时，会使sticky本身功能丧失</li></ol><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>beforeCreate 实例初始化之后，设置数据监听、事件监听、属性、方法之前调用</li><li>created 实例创建完成后调用，即数据监听、事件监听、属性、方法被配置完毕后调用</li><li>beforeMount 挂载开始之前调用</li><li>mounted 实例挂载完后调用，但不保证所有子组件都挂载完成</li><li>beforeUpdate 数据修改后，dom渲染前调用</li><li>updated 修改后的数据已经渲染到dom之后调用，但不保证的所有子组件都渲染完成</li><li>activated 被keep-alive缓存的组件激活时调用</li><li>deactivated 被keep-alive缓存的组件失活时调用</li><li>beforeDestroy 实例销毁前调用，此时实例完全可用</li><li>destroyed 实例销毁后调用</li></ol><h2 id="父子组件生命周期的执行顺序"><a href="#父子组件生命周期的执行顺序" class="headerlink" title="父子组件生命周期的执行顺序"></a>父子组件生命周期的执行顺序</h2><p>父beforeCreate-&gt; 父created -&gt; 父beforeMounte -&gt; 子beforeCreate -&gt;子created -&gt;子beforeMount -&gt;子 mounted -&gt; 父mounted</p><p>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件是可复用的vue实例</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>插槽是内容分发的出口，一般用于封装组件，封装的组件只实现一个通用的框架，具体的内容需要开发者自己提供</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>设置了名字的插槽，叫做具名插槽，默认名字为：default</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;son&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;  &lt;slot name=&quot;nameSlot&quot;&gt;&lt;/slot&gt;  &lt;/div&gt;&#x27;</span></span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在子组件中通过$slot.插槽名，可以获取父组件插槽中的内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$slot</span>.<span class="property">default</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他组件中使用</span></span><br><span class="line"><span class="comment">// v-slot 可以缩写为 # </span></span><br><span class="line">&lt;son&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:nameSlot</span>&gt;</span> 你的内容 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span> &lt;/son&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>作用域插槽就是让插槽内容能够访问子组件中的数据，通过给<slot>元素设置属性（插槽prop）实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;son&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;  &lt;slot name=&quot;nameSlot&quot; :user=&quot;user&quot;&gt;&lt;/slot&gt;  &lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他组件中使用，通过带值得 v-slot 引用 插槽prop</span></span><br><span class="line">&lt;son&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:nameSlot</span>=<span class="string">&quot;user&quot;</span>&gt;</span> 你的内容 &#123;&#123; user.nickname &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span> &lt;/son&gt;</span><br></pre></td></tr></table></figure><h2 id="动态组件和异步组件"><a href="#动态组件和异步组件" class="headerlink" title="动态组件和异步组件"></a>动态组件和异步组件</h2><ol><li><p>动态组件是指动态生成组件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过is属性实现</span></span><br><span class="line">&lt;component :is=<span class="string">&quot;componentName&quot;</span>&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure></li><li><p>异步组件是指 按需异步加载组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue允许你用一个工厂函数定义你的组件，这函数被调用的时，会异步解析你的组件定义，并缓存结果复用。</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component1&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/components/component1&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件data为什么一定要定义成函数"><a href="#组件data为什么一定要定义成函数" class="headerlink" title="组件data为什么一定要定义成函数"></a>组件data为什么一定要定义成函数</h2><p>因为组件是可以用来创建多个实例，如果data还是一个对象的话，那么所有实例将引用同一个数据对象；使用函数就不会这样，函数在创建一个组件实例的时候会被调用，然后返回一个数据对象的副本；</p><h2 id="props自定义属性"><a href="#props自定义属性" class="headerlink" title="props自定义属性"></a>props自定义属性</h2><ol><li>props对于基本数据类型是单向数据流的，父组件发生改变会传递到子组件，子组件一般不循序改变props</li><li>props对于引用类型，子组件可以改变引用类型的属性，因为是按引用值传递，所以父组件会跟着改变</li><li>props可以执行验证等操作</li></ol><h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><ol><li>计算属性的结果会被缓存（<strong>并不是访问一次就计算一次</strong>），除非依赖的<strong>响应式</strong>属性改变了才会重新计算（如果某个属性不是响应式则不会重新计算）</li><li>用于解决在模板中的进行复杂逻辑计算难以维护的问题 </li><li>用于一个属性需要随着其他属性变动而变动的情况</li><li>默认情况下是getter的回调，可以通过设置setter来达到重新赋值给计算属性时，在回调中按特定规则更新依赖</li><li>因为getter是通过同步执行一次来计算结果的，所以执行异步操作对结果没有任何影响</li></ol><h2 id="watch监听属性"><a href="#watch监听属性" class="headerlink" title="watch监听属性"></a>watch监听属性</h2><ol><li>watch用于监听数据的变化</li><li>用于数据变化时执行异步操作或开销比较大的操作</li></ol><h2 id="vue2-和-vue3-的区别"><a href="#vue2-和-vue3-的区别" class="headerlink" title="vue2 和 vue3 的区别"></a>vue2 和 vue3 的区别</h2><h3 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h3><ol><li><p>vue2 使用 Object.defineProperty()不能响应式监听对象新增属性和删除属性，以及不能直接通过下标修改数组元素。vue3 使用 Proxy 监听对象可以实现。</p></li><li><p>vue3新增composition（组合式） API，将data，methods、生命周期钩子函数都写在一堆，然后封装成一个hook，将同一功能的代码组合在一起。不用再像vue2那样，要去data里定义数据、methods里定义方法、生命周期钩子里边写代码，代码关联系不高。</p></li><li><p>vue3 优化了更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 事件缓存，定义了事件，就会缓存，下一次执行渲染函数，就不会重新构建</span><br><span class="line"><span class="number">2.</span> 静态标记，在生成渲染函数的过程中，打上patchFlags，然后在patch的过程中判断标记来优化diff</span><br><span class="line"><span class="number">3.</span> 静态提升，将不会变的节点或属性，将他们序列化为字符串，以此减少渲染成本，例：<span class="title function_">_createStaticVnode</span>(<span class="string">&quot;&lt;div&gt;&lt;span class=\&quot;foo\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;foo\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;foo\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;foo\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;foo\&quot;&gt;&lt;/span&gt;&lt;/div&gt;&quot;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Observer类"><a href="#Observer类" class="headerlink" title="Observer类"></a>Observer类</h2><p>给对象添加监听属性，遍历对象、数组实现递归监听。</p><h2 id="Dep类"><a href="#Dep类" class="headerlink" title="Dep类"></a>Dep类</h2><p>Dep类是用来给数组和对象存储watcher依赖的类。</p><h3 id="Watcher类"><a href="#Watcher类" class="headerlink" title="Watcher类"></a>Watcher类</h3><p>watcher类就是观察者，用来当数据改变后，执行响应操作。</p><h2 id="收集依赖defineReactive"><a href="#收集依赖defineReactive" class="headerlink" title="收集依赖defineReactive"></a>收集依赖defineReactive</h2><p>主要通过getter收集依赖，通过setter通知更新；收集依赖的根据就是当前Dep的watcher栈是否有watcher，如果有，那么就把当前watcher当做依赖收集起来。</p><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>就是通过Object.defineProperty(obj, key, {set: …., get:…})递归监听对象的所有属性。</p><h2 id="生成ast树"><a href="#生成ast树" class="headerlink" title="生成ast树"></a>生成ast树</h2><p>模板渲染生成ast树（抽象语法树）</p><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><p>diff算法就是对 新 旧 vnode 进行层序比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">采取四种状态</span><br><span class="line">新前 旧前<span class="comment">// 移动指针</span></span><br><span class="line">新后 旧后<span class="comment">// 移动指针</span></span><br><span class="line">新后 旧前<span class="comment">// 涉及到移动节点，旧前的dom节点移动到旧后之后，然后旧前vnode置为undefined</span></span><br><span class="line">新前 旧后<span class="comment">// 涉及到移动节点，旧后的dom节点移动到旧前之前， 然后旧后vnode置为undefined</span></span><br><span class="line"></span><br><span class="line">如果以上四种状态都没有匹配上，那么就进行暴力匹配，用旧子节点的key生成个map，然后查看新前的key是否存在。</span><br><span class="line">将新前拿去匹配旧vnode中的节点，如果匹配到，将旧vnode的dom节点移动到旧前之前，并将vnode置为<span class="literal">undefined</span>；否则，直接将新前插入到旧前之前</span><br><span class="line"></span><br><span class="line">特殊情况：</span><br><span class="line">旧子节点遍历完了，新子节点还没遍历完，则将新前~新后之间的节点，插入到旧子节点新前序号之前</span><br><span class="line">旧子节点没遍历完，新子节点遍历完了，则将旧前~旧后之间的节点删除。</span><br></pre></td></tr></table></figure><h2 id="nextTick机制"><a href="#nextTick机制" class="headerlink" title="nextTick机制"></a>nextTick机制</h2><p>通过在一个宏任务或微任务中update Watcher，因此无论主执行栈中的同步代码针对同一个Wather update多少次，在异步任务中只会update一次。</p><p>一个异步任务执行callbacks[]数组中的多个回调函数，$nextTick就是通过push进callbacks数组实现的。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211117175010290.png" alt="image-20211117175010290"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> waiting 表示 flushSchedulerQueue（run当前queue中所有watcher实例），是否加入callbacks事件队列；如果为真，就不会再把该函数加入队列，否则加入。</span><br><span class="line"><span class="keyword">let</span> flushing 表示 flushSchedulerQueue 是否正在run当前queue中的所有watcher实例；如果为假表示还没有清空queue直接加入。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = [] 是保存需要执行更新操作的watcher</span><br><span class="line"><span class="keyword">const</span> callbacks = [] 用来模拟事件队列，是保存下一次tick需要执行的回调函数</span><br><span class="line"><span class="keyword">const</span> timerFunc = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="built_in">setTimeout</span>(nextTickHandler, <span class="number">0</span>)&#125; 异步函数，用来添加异步任务，promise.<span class="title function_">then</span>() &gt; <span class="built_in">setTimeout</span>()，执行事件队列中的所有事件.</span><br><span class="line"><span class="keyword">let</span> pending 表示当前是否正在执行timerFunc，如果正在执行，则加入事件队列中等待。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解决当前主执行栈中的代码多次更新数据造成的多次更新vnode，所以使用异步更新，同一个更新任务只会加入队列一次。</span><br></pre></td></tr></table></figure><h2 id="Keep-Alive"><a href="#Keep-Alive" class="headerlink" title="Keep-Alive"></a>Keep-Alive</h2><p>Keep-Alive跟普通组件一样，也会进行实例化和挂载，因此会触发它的render函数，render函数实现了缓存vnode的功能；如果keep-alive里的组件改变，那么会触发updateChildComponent会执行vm.$forceUpdate所以keep-alive组件也会被重新渲染，keep-alive就会再一次执行render并处理传入的vnode。</p><h1 id="sql语句复习"><a href="#sql语句复习" class="headerlink" title="sql语句复习"></a>sql语句复习</h1><h2 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> user_id <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></table></figure><h2 id="insert-into-表名-列名-values-列值"><a href="#insert-into-表名-列名-values-列值" class="headerlink" title="insert into 表名 (列名) values (列值)"></a>insert into 表名 (列名) values (列值)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_admin (admin_id, account, password, create_time) <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;myn&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, now())</span><br></pre></td></tr></table></figure><h2 id="update-表名-set-字段名-字段值"><a href="#update-表名-set-字段名-字段值" class="headerlink" title="update 表名 set 字段名=字段值"></a>update 表名 set 字段名=字段值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_admin <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;sbmayana&#x27;</span> <span class="keyword">where</span> admin_id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="delete-from-表名-where-键-值"><a href="#delete-from-表名-where-键-值" class="headerlink" title="delete from 表名 where 键=值"></a>delete from 表名 where 键=值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_admin <span class="keyword">where</span> admin_id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="limit-0-5-等价于-limit-5-offset-0"><a href="#limit-0-5-等价于-limit-5-offset-0" class="headerlink" title="limit 0, 5 等价于 limit 5 offset 0"></a>limit 0, 5 等价于 limit 5 offset 0</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_blog limit <span class="number">5</span> <span class="keyword">offset</span> <span class="number">0</span> <span class="operator">/</span><span class="operator">/</span> 表示从第<span class="number">0</span>条记录开始，取<span class="number">5</span>条记录</span><br></pre></td></tr></table></figure><h2 id="like通配符，-表示0个或多个字符，-代表一个字符"><a href="#like通配符，-表示0个或多个字符，-代表一个字符" class="headerlink" title="like通配符，%表示0个或多个字符，_代表一个字符"></a>like通配符，%表示0个或多个字符，_代表一个字符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nickname <span class="keyword">from</span> tb_user <span class="keyword">where</span> nickname <span class="keyword">like</span> <span class="string">&#x27;[lunalizhengxin]%&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="in-元组"><a href="#in-元组" class="headerlink" title="in 元组"></a>in 元组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nickname <span class="keyword">from</span> tb_user <span class="keyword">where</span> nickname <span class="keyword">in</span> (<span class="string">&#x27;lizhengxin&#x27;</span>, <span class="string">&#x27;luna&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="union-select语句"><a href="#union-select语句" class="headerlink" title="union + select语句"></a>union + select语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_admin <span class="keyword">union</span> <span class="keyword">select</span> user_id, nickname, password, account, <span class="number">5</span>, <span class="number">6</span> <span class="keyword">from</span> tb_user</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 将两个多个<span class="keyword">select</span>语句查询到的数据合并到第一个<span class="keyword">select</span>的列下，要求后面的<span class="keyword">select</span>语句的列数要与第一个<span class="keyword">select</span>一致</span><br></pre></td></tr></table></figure><h2 id="给表中字段新建索引create-index-索引名-on-表名-列1，列2-…"><a href="#给表中字段新建索引create-index-索引名-on-表名-列1，列2-…" class="headerlink" title="给表中字段新建索引create index 索引名 on 表名 (列1，列2,…)"></a>给表中字段新建索引create index 索引名 on 表名 (列1，列2,…)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （加快查询速度，但是会减慢更新速度，因为索引也需要更新）</span></span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">INDEX</span> <span class="title class_">PersonIndex</span> <span class="variable constant_">ON</span> <span class="title class_">Person</span> (<span class="title class_">LastName</span>, <span class="title class_">FirstName</span>)</span><br></pre></td></tr></table></figure><h2 id="Date日期类函数"><a href="#Date日期类函数" class="headerlink" title="Date日期类函数"></a>Date日期类函数</h2><h3 id="now-，curdate-curtime"><a href="#now-，curdate-curtime" class="headerlink" title="now()，curdate(), curtime()"></a>now()，curdate(), curtime()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> now(), curdate(), curtime()</span><br><span class="line"></span><br><span class="line">now() 表示当前的日期的datetime类型</span><br><span class="line">curdate() 当前日期的<span class="type">date</span>类型</span><br><span class="line">curtime() 当前日期的<span class="type">time</span>类型</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211104101603459.png" alt="image-20211104101603459"></p><h3 id="date-日期或时间-提取日期或时间中的日期-date-部分"><a href="#date-日期或时间-提取日期或时间中的日期-date-部分" class="headerlink" title="date(日期或时间) 提取日期或时间中的日期(date)部分"></a>date(日期或时间) 提取日期或时间中的日期(date)部分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>, <span class="type">date</span>(create_time) <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211104102053136.png" alt="image-20211104102053136"></p><h3 id="extract-部分名-from-日期时间字段名-提取日期时间中的部分"><a href="#extract-部分名-from-日期时间字段名-提取日期时间中的部分" class="headerlink" title="extract(部分名 from 日期时间字段名) 提取日期时间中的部分"></a>extract(部分名 from 日期时间字段名) 提取日期时间中的部分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>, <span class="built_in">extract</span>(DAY_MICROSECOND</span><br><span class="line"> <span class="keyword">from</span> create_time), <span class="built_in">extract</span>(DAY_MICROSECOND</span><br><span class="line"> <span class="keyword">from</span> test_date), <span class="built_in">extract</span>(DAY_MICROSECOND</span><br><span class="line"> <span class="keyword">from</span> test_time) <span class="keyword">from</span> tb_blog</span><br><span class="line"></span><br><span class="line">`部分名：`</span><br><span class="line">MICROSECOND</span><br><span class="line"><span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">MINUTE</span></span><br><span class="line"><span class="keyword">HOUR</span></span><br><span class="line"><span class="keyword">DAY</span></span><br><span class="line">WEEK</span><br><span class="line"><span class="keyword">MONTH</span></span><br><span class="line">QUARTER</span><br><span class="line"><span class="keyword">YEAR</span></span><br><span class="line">SECOND_MICROSECOND</span><br><span class="line">MINUTE_MICROSECOND</span><br><span class="line">MINUTE_SECOND</span><br><span class="line">HOUR_MICROSECOND</span><br><span class="line">HOUR_SECOND</span><br><span class="line">HOUR_MINUTE</span><br><span class="line">DAY_MICROSECOND</span><br><span class="line">DAY_SECOND</span><br><span class="line">DAY_MINUTE</span><br><span class="line">DAY_HOUR</span><br><span class="line">YEAR_MONTH</span><br></pre></td></tr></table></figure><h3 id="DATE-ADD-date-interval-value-type-函数向日期添加指定的时间间隔"><a href="#DATE-ADD-date-interval-value-type-函数向日期添加指定的时间间隔" class="headerlink" title="DATE_ADD(date, interval value type) 函数向日期添加指定的时间间隔"></a>DATE_ADD(date, interval value type) 函数向日期添加指定的时间间隔</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add(create_time, <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>) <span class="keyword">from</span> tb_blog <span class="operator">/</span><span class="operator">/</span> 加三十天</span><br><span class="line">`type值：`</span><br><span class="line">MICROSECOND</span><br><span class="line"><span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">MINUTE</span></span><br><span class="line"><span class="keyword">HOUR</span></span><br><span class="line"><span class="keyword">DAY</span></span><br><span class="line">WEEK</span><br><span class="line"><span class="keyword">MONTH</span></span><br><span class="line">QUARTER</span><br><span class="line"><span class="keyword">YEAR</span></span><br><span class="line">SECOND_MICROSECOND</span><br><span class="line">MINUTE_MICROSECOND</span><br><span class="line">MINUTE_SECOND</span><br><span class="line">HOUR_MICROSECOND</span><br><span class="line">HOUR_SECOND</span><br><span class="line">HOUR_MINUTE</span><br><span class="line">DAY_MICROSECOND</span><br><span class="line">DAY_SECOND</span><br><span class="line">DAY_MINUTE</span><br><span class="line">DAY_HOUR</span><br><span class="line">YEAR_MONTH</span><br></pre></td></tr></table></figure><h3 id="DATE-SUB-date-interval-value-type-函数向日期减去指定的时间间隔"><a href="#DATE-SUB-date-interval-value-type-函数向日期减去指定的时间间隔" class="headerlink" title="DATE_SUB(date, interval value type) 函数向日期减去指定的时间间隔"></a>DATE_SUB(date, interval value type) 函数向日期减去指定的时间间隔</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> test_time, date_sub(now(), <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>), datediff(date_sub(now(), <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>), test_time) <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></table></figure><h3 id="DATEDIFF-date1-date2-函数返回第一个日期减去第二个日期的天数"><a href="#DATEDIFF-date1-date2-函数返回第一个日期减去第二个日期的天数" class="headerlink" title="DATEDIFF(date1, date2) 函数返回第一个日期减去第二个日期的天数"></a>DATEDIFF(date1, date2) 函数返回第一个日期减去第二个日期的天数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> test_time, date_sub(now(), <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>), datediff(date_sub(now(), <span class="type">interval</span> <span class="number">30</span> <span class="keyword">day</span>), test_time) <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></table></figure><h3 id="date-format-date-format-格式化日期"><a href="#date-format-date-format-格式化日期" class="headerlink" title="date_format(date, format) 格式化日期"></a>date_format(date, format) 格式化日期</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> create_time, date_format(create_time, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></table></figure><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><h3 id="对称加密（AES"><a href="#对称加密（AES" class="headerlink" title="对称加密（AES)"></a>对称加密（AES)</h3><ol><li>对称加密是指 加密 和 解密的两方使用相同的秘钥</li><li>优点：加密、解密速度快</li><li>缺点：在第一次交换秘钥的过程中，容易暴露给别人</li></ol><h3 id="非对称加密-RSA"><a href="#非对称加密-RSA" class="headerlink" title="非对称加密(RSA)"></a>非对称加密(RSA)</h3><ol><li>非对称加密是指 加密 和 解密的两方使用不同的秘钥进行加密和解密（用公钥加密后的数据，只有私钥能解密）</li><li>优点：使用两个秘钥，安全性较高，解决了第一次交换秘钥的过程中，容易暴露的问题</li><li>缺点：加密、解密的过程会比对称加密慢很多</li></ol><h2 id="HTTPS的握手过程"><a href="#HTTPS的握手过程" class="headerlink" title="HTTPS的握手过程"></a><a href="https://segmentfault.com/a/1190000021494676#comment-area">HTTPS的握手过程</a></h2><p>安全原理，结合了对称加密和非对称加密的优点，使用非对称加密 传输 对称加密的秘钥，弥补了在传输过程中可能被截取对称加密秘钥的问题 和 完全使用非对称加密速度远比对称加密慢很多的问题</p><p><img src="https://segmentfault.com/img/bVbCCMD" alt="SSL : TLS 握手过程" style="zoom: 150%;" /></p><ol><li><strong>client hello</strong>消息：客户端向服务端发送<strong>client hello</strong>消息发起握手请求，该消息包含了客户端所支持的 <strong>TLS版本</strong>、<strong>加密算法的组合</strong>以及一个随机字符串”<strong>client random</strong>“</li><li>“server hello”消息：服务端收到握手请求向服务端返回“server hello”消息，该消息包含了<strong><code>CA</code>证书、选择的加密算法组合</strong>以及一个随机字符串”<strong>server random</strong>“</li><li><strong>premaster secret</strong>字符串：客户端收到服务端<strong>server hello</strong>消息后，进行证书验证，并从证书中获取<strong>公钥</strong>，然后生成下一个随机字符串<strong>premaster secret</strong>将其用公钥加密后，发送给服务器</li><li>服务端收到客户端发来的<strong>premaster secret</strong>字符串，用私钥将其解密</li><li>客户端和服务器使用相同的加密算法对 <strong>client random、server random、premaster secret</strong>进行加密生成对称加密秘钥key</li><li>客户端发送经过key加密过的<strong>finished</strong>信号</li><li>服务端发送经过key加密过的<strong>finished</strong>信号</li><li>握手完成</li></ol><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2><ol><li>最重要的区别就是安全，HTTP明文传输，没有对数据进行加密安全性较差；HTTPS（HTTP + TLS/SSL）数据传输过程加密安全性较好</li><li>使用HTTPS需要去专门的机构申请CA证书，需要花费一定费用</li><li>HTTP页面响应速度比HTTPS快，由于加了一层安全层，建立连接的过程更复杂，需要交换更多数据；而且加密解密的过程也需要时间，难免会变慢</li><li>HTTP和HTTPS使用的端口也不一样，前者用443，后者用80</li></ol><h2 id="HTTP1-0-和-HTTP1-1和HTTP2-0的区别"><a href="#HTTP1-0-和-HTTP1-1和HTTP2-0的区别" class="headerlink" title="HTTP1.0 和 HTTP1.1和HTTP2.0的区别"></a>HTTP1.0 和 HTTP1.1和HTTP2.0的区别</h2><h3 id="HTTP1-0-和-HTTP1-1的区别"><a href="#HTTP1-0-和-HTTP1-1的区别" class="headerlink" title="HTTP1.0 和 HTTP1.1的区别"></a>HTTP1.0 和 HTTP1.1的区别</h3><ol><li><p><strong>缓存处理</strong></p><p><strong>HTTP1.0</strong>主要使用If-Modified-Since和Expires来做为缓存判断的标准，<strong>HTTP1.1</strong>则新增了更多缓存控制策略Entity tag、If-None-Match、cache-control等等。</p></li><li><p><strong>长连接</strong></p><p><strong>HTTP1.0</strong>默认短连接，即没发送一次HTTP请求就要新建一个TCP连接，浪费了很多资源在新建连接和销毁连接上；<strong>HTTP1.1</strong>则默认长连接，即建立一个TCP连接可以发送多条HTTP请求，减少了建立关闭连接的消耗。</p></li><li><p><strong>带宽优化</strong></p><p><strong>HTTP1.0</strong>不支持发送部分数据，例如只需要某个对象的一部分，而服务端却把真个对象都发送了过来，导致了带宽的浪费；HTTP1.0并且不支持断点续传。<strong>HTTP1.1</strong>在请求头引入Range头部，它允许只请求资源的一部分（返回码为206 partial content），并且支持断点续传，解决了1.0带宽浪费的问题。</p></li><li><p><strong>Host域头部</strong></p><p><strong>HTTP1.0</strong>中认为每台服务器都绑定一个唯一的IP地址，因此请求中并没有传递主机域（hostname）。随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。<strong>HTTP1.1</strong>的请求消息的响应消息都支持host域，而且请求消息中没有host域会报错。</p></li><li><p><strong>HTTP1.0新增24个错误状态码</strong></p></li></ol><h3 id="HTTP2-0-和-HTTP1-x-的区别"><a href="#HTTP2-0-和-HTTP1-x-的区别" class="headerlink" title="HTTP2.0 和 HTTP1.x 的区别"></a>HTTP2.0 和 HTTP1.x 的区别</h3><ol><li><p><strong>二进制数据格式</strong></p><p><strong>HTTP1.x</strong>使用文本格式数据存在天然缺陷；<strong>HTTP2.0</strong>直接使用二进制格式数据，在应用层和传输层之间增加了一个二进制分帧层，在兼容HTTP1.x的基础上，改进传输性能，实现低延迟和高吞吐量。</p></li><li><p><strong>多路复用</strong></p><p><strong>HTTP2.0</strong>多路复用允许同时通过单一的TCP连接发送多重请求-响应消息。即使连接共享，提高连接的利用率，同个域名只需要占用一个TCP连接。<strong>HTTP1.1</strong>对同一域名的TCP并行连接数有限制一般为4~5个，超过限制则会阻塞，可以通过使用多个域名解决，但是会有很多TCP连接建立，由于拥塞控制，每个TCP刚建立会经历慢启动，会大大降低传输速度；还会产生多个TCP连接竞争带宽的情况。</p></li><li><p><strong>header压缩</strong></p><p><strong>HTTP1.x</strong> header中含有大量数据，并且每次发送请求都会重复发送；<strong>HTTP2.0</strong> 使用 HPACK 算法对header的数据进行压缩，通讯双方各自缓存一份 header fields 表，然后实行差量更新header，就只需要传输差量就行，这样就避免了重复传输。</p></li><li><p><strong>服务端推送</strong></p><p>服务端推送是一种在客户端请求之前发送数据的机制。</p><p>服务端可以在发送页面 HTML 时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把 JS 和 CSS 文件推送给客户端保存到本地缓存，而不需要客户端解析 HTML 时再发送这些请求。</p></li></ol><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>拥塞控制是用来解决由网络拥塞引起的路由器缓存溢出而造成丢包的问题，主要原理是通过拥塞窗口控制发送方的发送速率达成的。</p><h3 id="拥塞控制的三种状态"><a href="#拥塞控制的三种状态" class="headerlink" title="拥塞控制的三种状态"></a>拥塞控制的三种状态</h3><p>超时的两种情况：1. 超时重传，ssthresh = cwnd / 2 , cwnd = 1MSS     2. 收到三个冗余ACK进入快速重传，ssthresh = cwnd / 2, cwnd = ssthresh + 3 MSS，尝试进入快速恢复一步到位</p><ol><li><p><strong>慢启动</strong> (进入条件：ssthresh = cwnd / 2; cwnd = 1MSS)</p><p>将拥塞窗口设置为1个MSS（最大报文段长度），初始发送速率为MSS/RTT；只要发送方每收到一个报文的确认拥塞窗口就增加一个MSS，窗口呈指数增长；慢启动结束的三个阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当收到一个由超时指示的丢包事件（即发生拥塞），发送方立即将ssthresh（慢启动阈值）设置为当前窗口的的一半，并将拥塞窗口重置为<span class="number">1</span>个<span class="variable constant_">MSS</span>，并重新执行慢启动。</span><br><span class="line"><span class="number">2.</span> 当在拥塞中慢启动等于ssthresh（慢启动阈值）时，还继续慢启动会有些鲁莽，所以转为拥塞避免阶段</span><br><span class="line"><span class="number">3.</span> 如果检测<span class="number">3</span>个冗余<span class="variable constant_">ACK</span>（当接收方接收到一个失序报文时，立即响应一个重复<span class="variable constant_">ACK</span>，在超时时间之前，提前告诉发送方，发送丢包事件，因为还能收到回复，证明拥塞没有超时那么严重），执行快速重传，并进入快速恢复阶段</span><br></pre></td></tr></table></figure></li><li><p><strong>拥塞避免</strong>（进入条件：cwnd = ssthresh）</p><p>进入拥塞避免时，拥塞窗口大小大约是上一次拥塞时值的一半，离拥塞并不遥远，所以应该谨慎增加拥塞窗口的大小；拥塞避免采用每个RTT只将cwnd增加一个MSS，即没收到一个ACK就将cwnd增加(MSS * MSS / cwnd)字节。</p><p>拥塞避免结束的两个阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当收到一个请求超时，设置发送方ssthresh=cwnd / <span class="number">2</span>，并且cwnd = <span class="number">1</span> <span class="variable constant_">MSS</span>，然后进入慢启动状态</span><br><span class="line"><span class="number">2.</span> 当收到三个冗余<span class="variable constant_">ACK</span>（发送丢包事件），设置发送方ssthresh = cwnd / <span class="number">2</span>, 并且cwnd = ssthresh + 3MSS (要加上三个冗余<span class="variable constant_">ACK</span>)，然后进入快速恢复状态</span><br></pre></td></tr></table></figure></li><li><p><strong>快速恢复</strong> (进入条件：ssthresh = cwnd / 2; cwnd = ssthresh + 3 MSS)</p><p>如果还会收到冗余ACK，就每收到一个冗余ACK就将cwnd增加一个MSS，</p><p>快重传和快恢复结束的两个阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当对丢失报文段的一个<span class="variable constant_">ACK</span>到达时，设置发送方cwnd = ssthresh 后进入拥塞避免状态</span><br><span class="line"><span class="number">2.</span> 当收到一个请求超时事件，ssthresh = cwnd / <span class="number">2</span>, cwnd = <span class="number">1</span> <span class="variable constant_">MSS</span>，之后进入慢启动状态</span><br></pre></td></tr></table></figure></li></ol><h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2><ul><li>Expires</li></ul><blockquote><p>响应头，代表该资源的过期时间，服务端和浏览器端可能有时差，不准确</p></blockquote><ul><li>Cache-Control</li></ul><blockquote><p>请求/响应头，缓存控制字段，精确控制缓存策略，主要子字段有 max-age 资源过期相对时间 和 no-cache 不使用强缓存；优先级比Expires高，只要有cache-control 就不判断 expires</p></blockquote><ul><li>If-Modified-Since</li></ul><blockquote><p>请求头，带上 上次服务端返回的 last-modified</p></blockquote><ul><li>Last-Modified</li></ul><blockquote><p>响应头，资源最近修改时间，由服务器告诉浏览器。</p></blockquote><ul><li>Etag</li></ul><blockquote><p>响应头，标识当前文件内容是否改变，是当前文件的唯一标识；解决了last-modified精确到秒（如果一秒钟修改多次检测不到）的问题，和 修改了文件但没有修改内容的问题 以及服务端不能精确得到文件的 last-modified 的值的问题</p></blockquote><ul><li>If-None-Match</li></ul><blockquote><p>请求头，发送上次服务端返回的 Etag文件是否修改的唯一标识 ，优先级比 if-modified-since 高，只要有 if-none-match 就不会去判断 if-modified-since</p></blockquote><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>通过服务端返回Expires 或 Cache-control 首部来设定，如果命中强缓存，浏览器会直接从本地缓存中读取数据，并返回 200 from memory/disk cache</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存通过客户端和服务端设置首部设定，设置Etag / If-None-Match，Last-Modified / If-Modified-Since 首部实现</p><h3 id="强缓存-和-协商缓存的工作"><a href="#强缓存-和-协商缓存的工作" class="headerlink" title="强缓存 和 协商缓存的工作"></a>强缓存 和 协商缓存的工作</h3><p>浏览器首先通过Expires 或 Cache-Control 验证是否命中强缓存，如果命中，则直接从本地缓存中读取数据，返回200；如果没有命中强缓存，则进入协商缓存阶段，发送 if-modified-since带有文件修改时间 和 if-none-match带有etag，如果没有修改就不返回文件返回304，浏览器就读取本地缓存；否则返回修改后的文件状态码200</p><h2 id="GET-和-POST的区别"><a href="#GET-和-POST的区别" class="headerlink" title="GET 和 POST的区别"></a>GET 和 POST的区别</h2><ol><li>GET参数通过url传递；POST参数放在请求体中</li><li>GET请求在url中存放的参数是有长度限制的（一般为2k）；POST则没有</li><li>GET请求只能进行url编码；POST请求可以多种编码（form-data、urlencoded、json、xml）</li><li>GET请求会被浏览器主动缓存，留下历史记录；POST则不会</li><li>GET产生一个TCP报文；POST产生两个TCP报文，对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li></ol><h2 id="服务器状态码"><a href="#服务器状态码" class="headerlink" title="服务器状态码"></a>服务器状态码</h2><ul><li><p>1xx：表示目前是协议的中间状态，还需要后续请求</p><p>100 Continue，post请求发送的第一个只包含header的报文，服务端响应 100 Continue 表示继续发送后续请求</p></li><li><p>2xx：表示请求成功</p><p>200 OK 正常返回</p><p>201 Created 请求成功并且服务器创建了新的资源</p><p>202 Accept 服务端接收到了请求，但尚未处理</p><p>204 No Content 服务端没有返回内容</p><p>206 Partial Content 服务端返回某个对象的部分内容</p></li><li><p>3xx：表示重定向状态，需要重新请求</p><p>301 Moved Permanently 请求对象永久重定向到新的位置，需要把原来保存的uri更新成新的uri（虽然浏览器规定不会从POST变成GET，但是实际运用中并没有遵守） </p><p>302 Found 临时重定向，表示这个资源只是暂时不能访问，希望用户本次使用新的URI，但是过一段时间后，可以正常访问；一般是访问某个网页需要权限，然后临时重定向到登录页面，登录后就可以继续访问（虽然浏览器规定不会从POST变成GET，但是实际运用中并没有遵守）</p><p>303 See Other 临时重定向，和302状态码很相似，不过明确表明了应使用GET方法定向获取资源</p><p>304 Not Modified 协商缓存命中返回的状态码</p><p>307 Temporary Redirect 临时重定向，与302很相似，严格遵照浏览器标准，不会从POST变成GET；</p></li><li><p>4xx：客户端错误状态码</p><p>400 Bad Requst 表示请求报文中存在语法错误。</p><p>401 Unauthorized 表示发送的请求需要通过HTTP认证</p><p>403 Forbidden 表示未获得文件访问权限，服务端拒绝对该资源的访问</p><p>404 Not Found 表示服务器上没有所请求的资源</p><p>405 Method Not Allowed 表示服务器禁止使用该方法请求</p></li><li><p>5xx：服务器端错误</p><p>500 Internal Server Error 表示服务端在响应请求时发生错误</p><p>502 Bad Gateway 表示扮演网关 或 代理 的服务器，从上游服务器接收到的响应式无效的</p><p>503 Service Unavailable 表示服务器 过载 或 维护 暂时无法处理请求</p></li></ul><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>webpack是一个模块打包器、支持code-splitting、模块化。。。</p><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><p>参与webpack打包流程的插件，可以参与到webpack的各个生命周期中。</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>识别webpack不认识的模块，并解析模块</p><h2 id="tree-shaking-摇树优化"><a href="#tree-shaking-摇树优化" class="headerlink" title="tree-shaking 摇树优化"></a>tree-shaking 摇树优化</h2><p>摇树优化是指在打包中，去除那些引入了，但是未被使用的模块。</p><h2 id="HMR-模块热更新"><a href="#HMR-模块热更新" class="headerlink" title="HMR 模块热更新"></a>HMR 模块热更新</h2><p>HMR能够在不刷新页面的情况下，动态替换资源模块。</p><h3 id="开启HMR"><a href="#开启HMR" class="headerlink" title="开启HMR"></a>开启HMR</h3><ol><li>配置 <code>devServer.hot</code> 属性为 true</li><li>在js中使用 <strong>module.hot.accept</strong>(模块标识，模块包含函数)</li></ol><h3 id="css实现HMR"><a href="#css实现HMR" class="headerlink" title="css实现HMR"></a>css实现HMR</h3><p><code>style-loader</code> 内置 Css 模块热更</p><h3 id="vue实现HMR"><a href="#vue实现HMR" class="headerlink" title="vue实现HMR"></a>vue实现HMR</h3><p><code>vue-loader</code> 内置 Vue 模块热更</p><h2 id="hash、chunkHash、contentHash"><a href="#hash、chunkHash、contentHash" class="headerlink" title="hash、chunkHash、contentHash"></a>hash、chunkHash、contentHash</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211206233913215.png" alt="image-20211206233913215"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125102026563.png" alt="image-20211125102026563"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125102543200.png" alt="image-20211125102543200"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125102610900.png" alt="image-20211125102610900"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125103837621.png" alt="image-20211125103837621"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125103945898.png" alt="image-20211125103945898"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125104512231.png" alt="image-20211125104512231"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125105003941.png" alt="image-20211125105003941"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125110321679.png" alt="image-20211125110321679"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125110419880.png" alt="image-20211125110419880"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125110649948.png" alt="image-20211125110649948"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125110744522.png" alt="image-20211125110744522"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125110908461.png" alt="image-20211125110908461"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125112252655.png" alt="image-20211125112252655"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125113248113.png" alt="image-20211125113248113"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125113718819.png" alt="image-20211125113718819"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125113723979.png" alt="image-20211125113723979"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125134718285.png" alt="image-20211125134718285"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211125135313468.png" alt="image-20211125135313468"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126224046052.png" alt="image-20211126224046052"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126225631011.png" alt="image-20211126225631011"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126230224713.png" alt="image-20211126230224713"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126230512406.png" alt="image-20211126230512406"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126232721501.png" alt="image-20211126232721501"></p><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126231534955.png" alt="image-20211126231534955"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126231545376.png" alt="image-20211126231545376"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211127094049007.png" alt="image-20211127094049007"></p><h2 id="提取vue-cli-webpack配置"><a href="#提取vue-cli-webpack配置" class="headerlink" title="提取vue-cli webpack配置"></a>提取vue-cli webpack配置</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211127101511107.png" alt="image-20211127101511107"></p><h2 id="vue-cli配置image-webpack-loader"><a href="#vue-cli配置image-webpack-loader" class="headerlink" title="vue-cli配置image-webpack-loader"></a>vue-cli配置image-webpack-loader</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">          <span class="attr">use</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">mozjpeg</span>: &#123;</span><br><span class="line">                  <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">quality</span>: <span class="number">50</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// optipng.enabled: false will disable optipng</span></span><br><span class="line">                <span class="attr">optipng</span>: &#123;</span><br><span class="line">                  <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">pngquant</span>: &#123;</span><br><span class="line">                  <span class="attr">quality</span>: [<span class="number">0.5</span>, <span class="number">0.65</span>],</span><br><span class="line">                  <span class="attr">speed</span>: <span class="number">4</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">gifsicle</span>: &#123;</span><br><span class="line">                  <span class="attr">interlaced</span>: <span class="literal">false</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126113627319.png" alt="image-20211126113627319"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126113805425.png" alt="image-20211126113805425"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211126114032648.png" alt="image-20211126114032648"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是用来限制类或对象的结构的规范</p><h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><h2 id="koa-router使用"><a href="#koa-router使用" class="headerlink" title="koa-router使用"></a>koa-router使用</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211201220837840.png" alt="image-20211201220837840"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211201221220198.png" alt="image-20211201221220198"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面经汇总</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面经汇总"><a href="#面经汇总" class="headerlink" title="面经汇总"></a>面经汇总</h1><h2 id="1-JavaScript-基础知识"><a href="#1-JavaScript-基础知识" class="headerlink" title="1.JavaScript 基础知识"></a>1.JavaScript 基础知识</h2><h3 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h3><ul><li>事件流就是当页面中元素触发了某个事件后，事件触发的顺序，称作事件流</li><li>事件流有三个阶段，分别是<ul><li>捕获阶段<ul><li>首先事件从 window，然后依次往内层元素捕获，直到触发到目标事件为止</li></ul></li><li>目标阶段<ul><li>当从捕获阶段找到触发事件的元素后，就会执行目标元素对应的事件处理函数</li></ul></li><li>冒泡阶段<ul><li>当经过目标阶段后，事件从目标元素向外层寻找，如果遇到对应的处理事件就会触发对应的函数，直到寻找到 window 为止</li></ul></li></ul></li><li>DOM0 级事件模型和 DOM2 级事件模型<ul><li>DOM0 级事件模型是浏览器早期的事件模型，它将事件监听绑定到 dom 对象对应的一些属性身上，例如 el.onclick、el.onmouseover 等等，这种事件绑定只能为同类型的事件绑定一个处理函数，如果再次绑定，会覆盖掉之前设置的处理函数</li><li>DOM2 级事件模型就是上述事件流，它使用的是 addEventListener 函数来添加事件监听，使用 removeEventListener 函数来移除事件监听，DOM2 级事件模型可以为同一个元素的同一类事件绑定多个事件处理函数，处理函数的执行顺序按照绑定的顺序执行</li></ul></li><li>为什么没有 DOM1 级事件模型<ul><li>因为在 DOM1 级标准中，并没有对事件的相关内容作定义</li></ul></li></ul><h3 id="js-垃圾回收机制"><a href="#js-垃圾回收机制" class="headerlink" title="js 垃圾回收机制"></a>js 垃圾回收机制</h3><ul><li>什么是垃圾<ul><li>当一个变量或对象没有被引用时，这个变量或者对象就是垃圾</li></ul></li><li>如何回收垃圾<ul><li>最开始将所有变量都做上标记</li><li>垃圾回收器会遍历所有的根节点，然后删除遍历到的对象的标记，直到遍历完过后，那些有标记的对象就是垃圾，然后对这些垃圾进行回收处理</li></ul></li><li>垃圾回收机制是如何优化的，怎么提升的垃圾回收效率和速度<ul><li>在运行环境中，其实主要有两部分的对象，一部分是临时的对象，比如函数作用域中定义的变量，还有一部分是比较长久的对象，比如 window、DOM 等等，如果每次垃圾回收都对这些对象进行处理的话，那么就会降低垃圾回收的效率</li><li>在 V8 引擎中，就为这两类对象提供了不同的垃圾回收机制，这种回收机制叫做分代回收<ul><li>为临时对象创建一个专门的堆空间，叫做新生代，新生代由副垃圾回收器管理</li><li>为长久对象创建一个专门的堆空间，叫做老生代，老生代由主垃圾回收器管理</li><li>副垃圾回收器管理的工作原理<ul><li>新生代中分了两个区，一个是对象区，一个是空闲区</li><li>每次有临时对象的加入，都会被添加到新生代中的对象区中去，当对象区要满的时候，进行标记清除，然后将有效的对象复制到空闲区中，并且会将它们有序的排列</li><li>最后清理对象区中的垃圾，然后通过对调，将空闲区的活动对象交换到对象区中，此时对象区就是有效的并且有序的对象</li><li>如果发现一个对象进行了多次交换，那么会将这个对象认为是长久对象，然后将它交由老生代区管理</li></ul></li><li>主垃圾回收器的工作原理<ul><li>进行标记清除，然后再将不连续的对象空间进行整理</li></ul></li></ul></li><li>增量回收<ul><li>将回收工作分成很多小块，每次执行一部分</li></ul></li></ul></li></ul><h3 id="闭包理解"><a href="#闭包理解" class="headerlink" title="闭包理解"></a>闭包理解</h3><ul><li><p>什么是闭包</p><ul><li>闭包就是存储在函数中的<strong>一组对象</strong></li></ul></li><li><p>那闭包对象中存储的是什么呢</p><ul><li>这组对象主要负责存储上级作用域的变量，本来上级作用域消失的时候，上级作用域中的变量也会随即被释放，但是，由于 js 的特性，是可以嵌套定义函数的，在上级作用域内定义的函数如果在上级作用域释放之后还需要保留，并且这个函数还使用了上级作用域中的变量，那么此时就是将这些还需要用到的变量保存到内部函数的闭包对象之中，每个闭包对象对应着它们的作用域（意思是会为每个变量被保留的作用域创建一个闭包对象）</li></ul></li><li><p>闭包有什么用</p><ul><li><p>可以用来私有化变量，当一个函数需要一个全局变量来保存数据时，但是全局其实并不需要这个变量，那么就可以利用闭包，比如防抖的例子</p></li><li><p>```javascript<br>function deBounce() {<br>  var timer<br>  return function () {</p><pre><code>clearTimeout(timer)timer = setTimeout(function () &#123;  // 执行的操作&#125;, 1000)</code></pre><p>  }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 在的 deBounce 函数中，就返回了一个函数，然后这个函数使用了 deBounce 中的 timer，那么这个返回的函数就会将 timer 保存在它的闭包中，外面的代码就不能访问到这个 timer，实现了变量私有化，避免了一些全局的污染</span><br><span class="line"></span><br><span class="line">### 如何判断一个变量是数组</span><br><span class="line"></span><br><span class="line">- 使用 instanceof，如果是数组，例如 a instanceof Array</span><br><span class="line">- 使用 Object.prototype.toString.call()，例如 Object.prototype.toString.call(a) == &#x27;[object Array]&#x27;</span><br><span class="line">- 注意，不能使用 typeof 来判断，因为 typeof 获取数组类型，得到的是字符串&#x27;object&#x27;</span><br><span class="line"></span><br><span class="line">### 实现柯里化</span><br><span class="line"></span><br><span class="line">- 柯里化就是将一个本来需要传入多个参数的函数，转换成每次只传入一个参数，然后返回一个函数，继续传入下一个参数，可以达到参数复用的效果，如 sum(1, 2)变成 sum(1)(2)</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  function processCurrying(fn, arg) &#123;</span><br><span class="line">    var _this = this</span><br><span class="line">    var len = fn.length</span><br><span class="line">    arg = arg || []</span><br><span class="line"></span><br><span class="line">    return function () &#123;</span><br><span class="line">      // 合并所有参数</span><br><span class="line">      Array.prototype.push.apply(arg, Array.prototype.slice.call(arguments))</span><br><span class="line">      if (arg.length &lt; len) &#123;</span><br><span class="line">        // 如果参数不足，则继续收集</span><br><span class="line">        return processCurrying.call(_this, fn, arg)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 参数足够，返回结果</span><br><span class="line">      return fn.apply(_this, arg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主要点就在于参数收集，如果参数不足，就继续递归调用，收集参数，如果参数达到原本函数的收集要求，那么就直接调用函数，返回最终的结果</p></li></ul><h2 id="2-JavaScript-高级知识"><a href="#2-JavaScript-高级知识" class="headerlink" title="2.JavaScript 高级知识"></a>2.JavaScript 高级知识</h2><h2 id="3-浏览器和网页知识"><a href="#3-浏览器和网页知识" class="headerlink" title="3.浏览器和网页知识"></a>3.浏览器和网页知识</h2><h3 id="浏览器输入-URL-到页面呈现经历了什么"><a href="#浏览器输入-URL-到页面呈现经历了什么" class="headerlink" title="浏览器输入 URL 到页面呈现经历了什么"></a>浏览器输入 URL 到页面呈现经历了什么</h3><ul><li>首先根据 url 地址，判断是否存在强缓存机制，如果存在，并且缓存有效，那么直接使用强缓存，不会再发送请求</li><li>根据域名解析出 ip 地址，解析步骤有查找浏览器缓存-&gt;查看主机缓存-&gt;查找 hosts 文件-&gt;进行 DNS 查询</li><li>三次握手，建立 tcp 连接，如果是 https 协议，还是建立对应的 ssl 连接，建立安全的传输通道</li><li>连接建立成功后，浏览器发送 http 或 https 请求</li><li>客户端收到请求后，如果存在协商缓存机制，进行协商缓存的判断，如果资源没有改变，则直接返回 304 状态码，让浏览器使用本地缓存，否则返回对应的数据</li><li>浏览器接收到数据后，对 html 进行解析，构造对应的 dom 树，在解析 html 过程中可能存在 js 文件，这时会停止解析，优先下载和解析 js 文件，还有解析 css 文件，构造 css 规则树，等 dom 树和 css 树构建完之后，将两个树合并构建渲染树，然后按一定规则，对渲染树进行布局（如盒子的尺寸和位置的计算），这个过程叫做重排，也叫文档回流，然后就是对颜色等样式信息进行计算，这个过程叫做重绘，最后交由 GPU 处理渲染，然后将页面呈现到显示器上</li></ul><h3 id="JS-文件执行顺序和页面渲染有什么关系吗"><a href="#JS-文件执行顺序和页面渲染有什么关系吗" class="headerlink" title="JS 文件执行顺序和页面渲染有什么关系吗"></a>JS 文件执行顺序和页面渲染有什么关系吗</h3><ul><li>通常 JS 代码会改变 DOM 树的结构，所以浏览器在解析 HTML 时如果遇到 JS 则会停下来先去执行 JS 文件再继续解析 HTML，这就可能会导致加载白屏。</li></ul><h3 id="XSS、CSRF-介绍一下"><a href="#XSS、CSRF-介绍一下" class="headerlink" title="XSS、CSRF 介绍一下"></a>XSS、CSRF 介绍一下</h3><ul><li><p><strong>XSS 全称 cross-site scripting（跨站点脚本）</strong>，是一种<strong>代码注入攻击</strong>，是当前 web 应用中最危险和最普遍的漏洞之一。<strong>攻击者向网页中注入恶意脚本，当用户浏览网页时，脚本就会执行，进而影响用户</strong>，比如关不完的网站、盗取用户的 cookie 信息从而伪装成用户去操作，危害数据安全。</p></li><li><p><strong>CSRF 跨站请求伪造</strong>（英语：Cross-site request forgery），是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。如：</p><p>攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p></li></ul><h3 id="什么是-http-和-https"><a href="#什么是-http-和-https" class="headerlink" title="什么是 http 和 https"></a>什么是 http 和 https</h3><ul><li>http 就是超文本传输协议，它是基于请求和响应的模式，具有无连接、无状态、便捷等特点。</li><li>https 是 http 和 ssl 的结合，因为 http 其实是不安全的，因为 http 是明文传输数据，所以攻击者可以很轻易的拿到 http 请求的数据，所以 https 对 http 采用 ssl 加密，来保证安全性。</li></ul><h3 id="https-加密传输过程"><a href="#https-加密传输过程" class="headerlink" title="https 加密传输过程"></a>https 加密传输过程</h3><ul><li>首先，https 传输是需要服务器认证相应的 CA 证书机构，当认证后，服务器就会得到 CA 机构颁发的数字证书</li><li>浏览器向服务器发起请求，并携带上浏览器拥有的加密算法，供服务器选择</li><li>服务器此时会返回一个数字证书、数字签名（用 CA 机构的私钥加密后的数字证书）和选择的加密算法。</li><li>浏览器收到数字证书后，会对数字证书的内容进行验证，进行证书内容是否过期等检验，然后会利用 CA 机构的公钥对数字签名进行解密（数字签名解密后其实就是数字证书），然后利用解密后的内容和数字证书进行对比，如果有任何差错，就会拒绝本次连接。</li><li>此时就会利用服务器选择的加密算法，生成一组随机数（这组随机数就是对称加密的密钥），然后利用 CA 证书中的公钥对生成的密钥进行加密，传送给服务器。</li><li>服务器再利用 CA 证书中的私钥，对加密传输过来的秘钥进行解密，之后服务器和浏览器就会通过这对密钥对传输的数据进行加密和解密。</li></ul><h3 id="什么是-websocket，和-http-有什么不同"><a href="#什么是-websocket，和-http-有什么不同" class="headerlink" title="什么是 websocket，和 http 有什么不同"></a>什么是 websocket，和 http 有什么不同</h3><ul><li>http 是请求和相应模式的协议，但是在 http 中，每建立的一个连接，只能进行一次请求和响应，虽然在 http1.1 中加入和 keep-alive，使得 http 可以在一次连接中进行多次请求和响应，但是一个响应就对应者一个请求（服务器是不能主动向客户端发送请求的），即响应是被动的状态</li><li>websocket 是基于 http 协议实现的，他们建立连接的方式一样，也是采用三次握手，但是在 websocket 中响应可以是主动的，也就是不需要客户端向服务器发起请求，服务器也能向客户端发送信息</li></ul><h3 id="http-的请求方法和应用场景"><a href="#http-的请求方法和应用场景" class="headerlink" title="http 的请求方法和应用场景"></a>http 的请求方法和应用场景</h3><ul><li>GET<ul><li>数据直接放在 url 的后面</li><li>一般用于请求数据使用</li></ul></li><li>POST<ul><li>数据放在请求体 body 中</li><li>一般在提交表单，或者上传一些保密的数据使用</li><li>POST 数据发送分为两个阶段，第一阶段先发送 header，等待服务器响应 100 后，再发送 data</li></ul></li></ul><h3 id="http2-与-http1-1-的区别"><a href="#http2-与-http1-1-的区别" class="headerlink" title="http2 与 http1.1 的区别"></a>http2 与 http1.1 的区别</h3><ul><li>http2 采用了多路复用技术，提高了信息传输的速度，提高资源利用率</li><li>使得一个连接可以并发发出多个请求</li><li>为什么 HTTP1.1 中不能实现多路复用呢？<ul><li>因为 HTTP2 是基于二进制“帧”的协议，而 HTTP1.1 是基于“文本分割”解析的协议</li><li>在 HTTP1.1 的文本分割中，数据会被分割成多条内容，每条内容会有指定的分隔符，所以在服务器接收信息的时候，是以不断读取字符的方式接收信息，直到读取到了规定的分隔符，代表一条数据读取完毕，如果在这种情况下使用多路复用（即不同的数据一起传输），那么服务器无法辨别哪一个段属于哪一条数据，就会产生错误。</li></ul></li><li>那为什么”数据帧“的方式传输就能多路复用呢？<ul><li>因为在数据帧中，包含了许多关于数据的信息，比如数据的长度，所属数据的标识等等，通过这些信息，服务器便可知道数据帧是属于哪个完整数据的，就可以实现交错传递和多路复用，而不是单一传递一种数</li></ul></li></ul><h3 id="同源策略和跨域的理解"><a href="#同源策略和跨域的理解" class="headerlink" title="同源策略和跨域的理解"></a>同源策略和跨域的理解</h3><ul><li><p>同源策略是浏览器作出的安全策略</p></li><li><p>同源策略只两个地址它们的协议、域名、端口号都相同，则为同源，否则就是跨域</p></li><li>在非同源的情况下，是不能读取 cookie、dom，ajax 请求也不能跨域发送，这能有效阻止跨站攻击</li><li><p>如何进行跨域的请求</p><ul><li><p>第一种可以利用 script 标签的请求机制，因为 script 标签请求 js 脚本是不受同源策略限制的，也就是可以发起跨域的脚本请求，基于这种条件下，在利用 script 标签请求指定路径时，附带上一个处理函数，在传送到服务器时，服务器会利用需要的数据对这个处理函数进行包装，最后返回给客户端去执行，这种方式称为<strong>JSONP</strong></p></li><li><p>第二种是利用<strong>CORS</strong>跨域，全称<strong>跨域资源共享</strong>（Cross-origin resource sharing），CORS 需要浏览器和服务器同时支持，在浏览器支持的情况下，浏览器会自动处理跨域请求，并在请求头中加入 origin 字段，而对于服务器，只需要在响应头中设置<strong>Access-Control-Allow-Origin</strong>字段，即设置允许跨域访问的请求源，就可以实现跨域资源共享</p></li><li><p>还有一种跨域页面传递消息，postMessage，可以让父子页面进行通信</p><ul><li><p>```js<br>// 父页面<br>var iframe = document.getElementById(‘iframe’)<br>iframe.contentWindow.postMessage(‘数据内容’, ‘*’)</p><p>// 子页面<br>window.addEventListener(‘message’, function (e) {<br>  // e中三个重要数据<br>  // e.data 发送过来的数据<br>  // e.origin 发送消息的源，协议+地址+端口号<br>  // e.source 发送消息的窗口对象<br>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    -</span><br><span class="line"></span><br><span class="line">### cookie、sessionStorage、localStorage、indexDB 的区别</span><br><span class="line"></span><br><span class="line">- 首先它们的共同点是都存储在浏览器，并且只有同源地址才可以访问</span><br><span class="line"></span><br><span class="line">- sessionStorage 和 localStorage 都是 webStorage 的内容，是 HTML5 的标准，它们都是存储在客户端，是不与服务器交互的数据，并且存储大小可达 5MB</span><br><span class="line"></span><br><span class="line">- cookie 则是会与服务器有数据交换的，存储大小只有 4KB，因为请求头中是可以携带 cookie 到服务器，而响应头中可以设置 cookie，所以对于只在本地使用的数据，建议使用 webStorage 来存储</span><br><span class="line"></span><br><span class="line">- indexDB 作为一个本地数据库，又更强大的功能，能建立索引，类似于一个非关系数据库，存储大小没有限制</span><br><span class="line"></span><br><span class="line">### cookie 中属性的作用</span><br><span class="line"></span><br><span class="line">- expires</span><br><span class="line">  - 用于设置 cookie 的过期时间，时间格式为 GMT</span><br><span class="line">- domian 和 path</span><br><span class="line">  - domain 设置的 cookie 有效的域，可以是二级域名，也可以是三级域名，如www.baidu.com或baidu.com</span><br><span class="line">  - path 设置的是 cookie 有效的路径，如/，/home 等</span><br><span class="line">  - 当设置了 doamin 和 path 属性时，只有指定域和路径下的网页才可以访问到这个 cookie，才会将这个 cookie 在发送请求时携带</span><br><span class="line">  - domain 默认为当前访问的网页的域名，path 为当前访问网页所在的路径</span><br><span class="line">- secure</span><br><span class="line">  - 只有当请求是 https 时，才会将 cookie 携带，发送到服务器</span><br><span class="line">- httpOnly</span><br><span class="line">  - 这个属性用于限制 js 访问 cookie，如果服务器在响应头中设置 cookie 时添加了这个属性，那么当这个 cookie 添加到浏览器后，js 脚本是访问不到这个 cookie 的</span><br><span class="line">  - 所以在客户端是不能设置带 httpOnly 属性的 cookie 的</span><br><span class="line">- samesite</span><br><span class="line">  - 用于限制 cookie 在跨站请求是是否被携带</span><br><span class="line">  - 属性值</span><br><span class="line">    - Strict 完全禁止第三方 cookie，在跨站情况下绝对不会携带 cookie</span><br><span class="line">    - Lax 允许第三方请求携带 cookie</span><br><span class="line">    - None 无论是否跨站都携带 cookie</span><br><span class="line"></span><br><span class="line">### html 中的 DOCTYPE</span><br><span class="line"></span><br><span class="line">- 在过去的 html 有严格模式和混杂模式区分</span><br><span class="line">  - 严格模式：按照浏览器的最高标准进行页面渲染</span><br><span class="line">  - 混杂模式：根据实际情况进行向下兼容的渲染</span><br><span class="line">- html5 中没有 DTD，所以就没有严格模式和混杂模式的区分</span><br><span class="line"></span><br><span class="line">### 强缓存和协商缓存</span><br><span class="line"></span><br><span class="line">- 强缓存</span><br><span class="line">  - 指在请求页面或资源时，如果之前访问后添加了强缓存，那么如果在缓存时间没有过期的情况下，会直接从缓存中读取资源，而不会从服务器获取</span><br><span class="line">  - 但是如果刷新页面，那么会正常发送请求，去获取服务器上的资源</span><br><span class="line">- 协商缓存</span><br><span class="line">  - 在第一次请求页面后，会在响应头中返回两个相关信息，一个是 etag，一个是 modified，etag 代表资源的唯一编号，如果资源被修改了，那么这个编号也会改变，modified 代表资源最后修改的时间</span><br><span class="line">  - 在后续的请求页面中，如果之前请求过设置了协商缓存的资源，那么在后面的请求头中带上之前的 etag 和 modified 字段，当访问服务器后，会用服务器最新资源的 etag 和请求头中的 etag 对比，如果相同，则直接返回一个 304 状态码的响应，代表资源未更新，客户端将会从缓存获取这个资源，如果对比后发现 etag 不同，则代表资源已经更新，这是会将最新的资源和最近 etag 和 modified 返回，且状态码为 200</span><br><span class="line">- 如何设置强缓存</span><br><span class="line">  - 在响应头中设置`cache-control`字段，字段内容如下</span><br><span class="line">    - `max-age` 指定缓存过期时间 格式：max-age=123，单位为秒</span><br><span class="line">    - `public` 资源可以为客户端和代理服务器缓存</span><br><span class="line">    - `private` 资源只能被客户端缓存</span><br><span class="line">    - `immutable` 设置后，进行刷新操作也不会重新请求，只有当 max-age 过期之后，才会重新发起请求</span><br><span class="line">    - `no-cache` 跳过强缓存，而走使用协商缓存</span><br><span class="line">    - `no-store` 不使用缓存，这时服务器和客户端就都不会缓存</span><br><span class="line">    - 选择多个属性用 ‘,’拼接，如：max-age=123, public, immutable</span><br><span class="line">  - 第二种是设置`expires`，但是`cache-control`比`expires`优先级要高</span><br><span class="line">- 如何设置协商缓存</span><br><span class="line">  - 在响应头中设置 etag 和 modified 字段</span><br><span class="line">  - 在请求头携带是名称有点不一样</span><br><span class="line">    - `etag`在请求头中为 `if-none-matched`</span><br><span class="line">    - `modified`在请求头中为`if-modified-since`</span><br><span class="line"></span><br><span class="line">### 重排（回流）和重绘</span><br><span class="line"></span><br><span class="line">- 什么是重排和重绘</span><br><span class="line"></span><br><span class="line">  - 当浏览器收到了请求回来的 html 和 css 文件之后，浏览器会对这两种文件进行解析，解析 html 文件来创建 DOM 树，解析 css 文件来创建样式树（CSSOM），然后将这两种树合并起来，形成一个渲染树，然后由渲染树计算布局的位置，尺寸等信息，这个构造过程过程，就叫做重排，随后需要根据渲染进行绘制，然后显示到屏幕上，这个过程就叫做重绘</span><br><span class="line"></span><br><span class="line">- 什么时候会重排和重绘</span><br><span class="line"></span><br><span class="line">  - 当元素的几何属性改变时，这时就会造成重排，几何属性就是这个属性影响着整体的布局，如果这个属性改变，可能就会影响其他元素的改变，所以这时需要重排，那么重排之后，肯定就会造成重绘</span><br><span class="line">  - 但是当修改元素的样式时，比如修改颜色等操作，这种是绝对不会影响其他元素布局的，所以只会造成重绘，不会造成重排</span><br><span class="line">  - 所以发生重排一定会重绘，重绘不会造成重排</span><br><span class="line"></span><br><span class="line">- 如何优化重排</span><br><span class="line"></span><br><span class="line">  - 当改变元素的几何属性，就会发生重排，如果多次修改，那么就会发生多次重排，所以我们可以把多次修改属性整合到一次修改，那么就只会发生一次重排了</span><br><span class="line"></span><br><span class="line">    - 比如原本是这样的</span><br><span class="line"></span><br><span class="line">    - ```javascript</span><br><span class="line">      // javascript</span><br><span class="line">      var el = document.querySelector(&#x27;.el&#x27;)</span><br><span class="line">      el.style.borderLeft = &#x27;1px&#x27;</span><br><span class="line">      el.style.borderRight = &#x27;2px&#x27;</span><br><span class="line">      el.style.padding = &#x27;5px&#x27;</span><br></pre></td></tr></table></figure></li><li><p>然后我们把这三个操作合并到一起</p></li><li><p>```javascript<br>var el = document.querySelector(‘.el’)<br>el.style.cssText = ‘border-left: 1px; border-right: 2px; padding: 5px’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 这样，就会减少重排，当然最好的还是更换元素的类选择器，来达到一次性修改样式的目的</span><br><span class="line"></span><br><span class="line">  - 那如果是同时添加多个 DOM 元素呢，那该如何解决，其实我们可以将要添加元素的父元素脱离文档，使它暂时不会影响文档的其他元素，这样，在这个元素中添加其他元素，也就不会每次添加都导致页面的重排</span><br><span class="line"></span><br><span class="line">    - 脱离文档的方法有多种</span><br><span class="line">    - 第一种可以将父元素设置 display: none，然后将元素添加到父元素中，等添加完之后，在将父元素 display: block，这样无论添加多少个子元素，都只会造成两次重排，一次是隐藏，一次是显示</span><br><span class="line">    - 第二种可以利用文档碎片，先把要添加的元素添加到文档碎片中，然后再把文档碎片添加到父元素中，这样只会造成一次页面重排，是比较好的一种方案</span><br><span class="line"></span><br><span class="line">  - 还有一种就是对`offsetTop，offsetLeft，scrollTop，clientTop`等待属性进行获取时，因为这些属性都具有实时性，所以浏览器不得不将页面进行重排，然后实时返回这些属性的相关信息</span><br><span class="line"></span><br><span class="line">    - 所以要使用这类属性的时候，应该用一个变量先保存，之后使用这个变量即可，而不是每次都去获取这个属性，从而造成浏览器的多次重排</span><br><span class="line"></span><br><span class="line">### 浏览器组成</span><br><span class="line"></span><br><span class="line">- 浏览器主进程</span><br><span class="line">  - 浏览器的主要管理进程，负责浏览器中所有操作的管理</span><br><span class="line">- GPU 进程</span><br><span class="line">  - 负责管理 GPU 渲染</span><br><span class="line">- 插件进程</span><br><span class="line">  - 当浏览器启用插件时，会为每个插件创建一个插件进程</span><br><span class="line">- 渲染进程（浏览器会为每个 tab 页面床架渲染进程，因为页面之间是独立的）</span><br><span class="line">  - GUI 线程</span><br><span class="line">    - 负责 HTML、CSS 代码的解析和渲染</span><br><span class="line">  - js 线程</span><br><span class="line">    - js 的主线程，负责执行 js 代码</span><br><span class="line">  - 事件管理线程</span><br><span class="line">    - 用于管理 js 中的异步任务，事件循环机制就是在此管理的</span><br><span class="line">  - 定时器线程</span><br><span class="line">    - 用于将有结果的定时器的回调函数，推入事件循环的任务队列中</span><br><span class="line">  - 请求线程</span><br><span class="line">    - 管理 ajax 请求，当 ajax 请求返回时，也会将请求的处理函数交由事件循环来管理</span><br><span class="line"></span><br><span class="line">### 为什么 inline-block 元素之间会有一个空隙</span><br><span class="line"></span><br><span class="line">- 往往在页面布局的时候，两个元素之间会换行，浏览器在解析行内元素的时候，会将这个换行当成一个空白符来解析，当 font-size 不为 0 时，这个空白符就会有一定的宽度，所以就出现了我们看到的空隙</span><br><span class="line"></span><br><span class="line">### CDN 加速（Content Delivery Network 内容分发网络）</span><br><span class="line"></span><br><span class="line">- CDN 加速是利用多个分布在网络中的缓存服务器，让用户以尽量快的速度访问到最近的资源，达到提高页面加载速度的目的</span><br><span class="line">- CDN 加速的具体流程</span><br><span class="line">  - 首先得有一台 CDN 专用的 DNS 服务器，和若干台缓存服务器</span><br><span class="line">  - 当浏览器对 URL 请求时，这台专用的 DNS 服务器会解析域名地址，找到对应的负载均衡设备</span><br><span class="line">  - 负载均衡设备会根据请求的 URL 解析出的 IP 地址，选择一个距离最近的服务器，或者根据请求的资源，找到拥有资源的服务器，或者根据服务器的负载情况，选择一台服务器，最终会结合以上三种情况，找到一个合适的缓存服务器，最后将缓存服务器的 ip 返回给浏览器</span><br><span class="line">  - 浏览器后续就会根据缓存服务器提供的 ip 地址，当请求指定资源时，就会向这台缓存服务器请求，达到提高加载速度的目的</span><br><span class="line">  - 有一种特殊情况，有可能负载均衡设备返回的缓存服务器并没有请求的资源，此时缓存服务器会一直向上级的缓存服务器请求，直到找到资源为止，如果缓存服务器都没有，最终会请求到源服务器</span><br><span class="line"></span><br><span class="line">1.</span><br><span class="line"></span><br><span class="line">## 4.CSS</span><br><span class="line"></span><br><span class="line">### `link`和`@import`的区别</span><br><span class="line"></span><br><span class="line">- `link`是在加载页面时同时加载对应的文件，而`@import`是在页面加载完毕后才加载</span><br><span class="line">- `link`引入的样式权重大宇`@import`引入的</span><br><span class="line">  - 原因其实就是在于`@import`的定义，`@import`只能定义在除`@charset`以外所有 CSS 规则的上方，否则会被浏览器给忽略，那么久可以理解为，`@import`加载进来的样式会放在当前文件 CSS 规则的最顶部，也就是为什么`link`的文件中样式会覆盖`@import`中的样式</span><br><span class="line">  - 那么为什么`@import`比`link`后加载，还会被覆盖呢？因为后加载依然会触发浏览器对 DOM 和 CSS 的渲染，浏览器最终会按照 CSS 的规则顺序进行渲染，就是因为`@import`加载的 CSS 在最顶部，所以浏览器会从最顶部从新向下渲染</span><br><span class="line">  - 所以这里不推荐使用`@import`，因为使用`@import`时，可能会在页面已经渲染完成 link 标签中 CSS 的情况下，然后加入了`@import`中的样式，这时浏览器又会从头渲染一遍 CSS，导致性能的浪费</span><br><span class="line"></span><br><span class="line">### transition 和 animation 的区别</span><br><span class="line"></span><br><span class="line">- transition 只有两个阶段，一个 from，即开始阶段，也是当前阶段，还有一个是 to，就是结束阶段，那么 transition 就只能从当前样式变成另外一个样式</span><br><span class="line">- animation 是动画的意思，那么就很清楚，动画是不止两个阶段的，可以有很多个阶段，也就是 animation 中的 keyframes，我们可以通过设置 keyframes 来设置动画在每一个阶段的样式</span><br><span class="line"></span><br><span class="line">### box-sizing: border-box 特性</span><br><span class="line"></span><br><span class="line">- 设置边框盒子之后，如果设置宽度，再设置内边距 padding 时，不会使盒子变大</span><br><span class="line">- 特例的，如果当盒子宽度没有 padding 宽时，盒子将直接被撑开到 padding 的宽度，例如左右 padding 分别为 50px，但盒子宽度只有 50px，那么盒子将直接被撑开到 100px，也就是 padding 的和</span><br><span class="line"></span><br><span class="line">### item 中的 flex 属性详解</span><br><span class="line"></span><br><span class="line">- flex-grow</span><br><span class="line">  - 用于设置元素分配父容器主轴上剩余空间的比例</span><br><span class="line">  - 假设此时有一个父容器，宽度为 500px 并且设置了 dispaly:flex，然后有两个 item，宽度分别为 200px 和 100px，如果为这两个 item 设置上 flex-grow: 1，意为让他们两个平均分配主轴上的剩余空间，此时剩余空间为 500-200-100=200px，那么每个 item 将会分得 100px，那么第一个盒子就会变成 300px，第二个盒子变为 200px</span><br><span class="line">  - 注意，这时是分配主轴上的剩余空间，所以当 flex-direction 为 row 或 row-reverse 时，分配的便是剩余的宽度，而当 flex-direction 为 column 或 column-reverse 时，分配的便是高度</span><br><span class="line">- flex-shrink</span><br><span class="line">  - 用于设置上主轴上元素超出父容器大小时，缩放的系数</span><br><span class="line">  - 那么什么是缩放系数呢，缩放系数并不像 flex-grow 一样，是对超出空间进行比例分配，这个系数跟 item 实际的宽度或高度也是有关的（如果主轴是横着的就是宽度，主轴是竖着的就是高度，也可以称为在主轴上的长度），那么缩放系数怎么计算呢？应该用**缩放系数\*元素实际在主轴上的长度**，这个得到的值才是真正的缩放比例</span><br><span class="line">  - 加入一个 item 为 300px，一个 item 为 400px，它们的 flex-shrink 分别为 2 和 1，父元素宽度为 400px，如果错误的向 flex-grow 一样计算，那么超出的宽度是 300+400-400=300px，根据它们 flex-shrink，分别需要减去 300\*2/3 和 300\*1/3，当然这样计算是错误的</span><br><span class="line">  - 真正的缩小比例是上面说的缩放系数\*元素在主轴上的长度，那么它们的缩放比例分别就是 2\*300 和 1\*400，所以分别减去的应该是 300\*600/1000 和 300\*400/1000，这才是正确的计算</span><br><span class="line">  - 很重要的一点，计算缩放比例时取的**元素在主轴上的实际宽度**其实是盒子的 content-width，而不是我们实际看到的盒子的宽度，所在当 box-sizing 为 border-box 和 content-box 时，其实计算出来的缩小后的宽度是不一样的</span><br><span class="line">- flex-basis</span><br><span class="line">  - 用于定义元素在主轴上的长度</span><br><span class="line">  - 如果 flex-direction 为 row 或 row-reverse，其实设置的就是宽度，如果 flex-direction 为 column 或 column-reverse，那么设置的就是高度</span><br><span class="line">  - 这个属性的优先级会比 width 或 height 优先级高，就是当 flex-basis 设置了固定值时，flex-basis 会被优先使用</span><br><span class="line">- 参考文章：</span><br><span class="line">  - [深入理解 flex 属性](https://www.cnblogs.com/ghfjj/p/6529733.html)</span><br><span class="line">  - [你不知道的 flex-shrink 计算规则](https://www.cnblogs.com/liyan-web/p/11217330.html)</span><br><span class="line"></span><br><span class="line">### 如何设置多行省略号</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  display: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: 2; /* 代表几行后为省略号 */</span><br><span class="line">  overflow: hidden;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="为什么-img-是-inline，却可以设置宽高呢"><a href="#为什么-img-是-inline，却可以设置宽高呢" class="headerlink" title="为什么 img 是 inline，却可以设置宽高呢"></a>为什么 img 是 inline，却可以设置宽高呢</h3><ul><li>因为 img 是一个<strong>可替换元素</strong>（replaced element）</li><li>什么是可替换元素呢？这些元素一般是一个外部的对象，它们外观的渲染，是独立于 CSS 的。</li><li>其实就是那种从外部引入的具有内容的东西，但是这些内容又不是 CSS 渲染的，比如说 img，video，embed，iframe，这些都是有一个引入资源的属性，这种元素就叫做可替换元素，像这种元素 CSS 对它们的内容其实是不可操作的，只能操作它们的位置</li><li>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element">可替换元素 MDN</a></li></ul><h3 id="border-0-和-border-none-的区别"><a href="#border-0-和-border-none-的区别" class="headerlink" title="border: 0 和 border: none 的区别"></a>border: 0 和 border: none 的区别</h3><ul><li>虽然宽度设置为 border: 0，但是浏览器渲染时仍然会认为 border 存在，随意还会对 border-width 和 border-color 也进行渲染，导致了不必要的消耗</li><li>而 border: none 设置的是边框不存在，随意浏览器将会忽略边框的渲染</li></ul><h3 id="CSS-可视化格式模型（visual-formatting-model）"><a href="#CSS-可视化格式模型（visual-formatting-model）" class="headerlink" title="CSS 可视化格式模型（visual formatting model）"></a>CSS 可视化格式模型（visual formatting model）</h3><ul><li><p>CSS 的可视化格式模型，就是规定 CSS 中的每个盒子（就是由 html 元素生成的盒子）在页面中如何摆放</p></li><li><p>包含块（containing block）</p><ul><li><p>包含块就是一个框，这个框，决定了它的子孙元素如何摆放，一个元素的包含块，指的就是这个元素定位和基准的那个框（基准有定位基准和尺寸基准，如 top：0，width：100%等）</p></li><li><p>那么每个元素的包含块是如何确定的呢？</p><ul><li><p>第一种是根元素，根元素就是文档最顶层的元素，这个元素也有包含块，这个包含块叫做初始化包含块，也就是最顶层的一个包含块</p></li><li><p>第二种是 position 为 static 和 relative 的元素，这些元素的包含块就是 display 为块、单元格和行内块的最近的祖先级元素的内容区，也就是最近的显示类型为块的祖先元素的内容区（内容区就是盒子模型中的 content）</p></li><li><p>第三种是 position 为 fixed，这种元素的包含块，就是浏览器的可视窗口</p></li><li><p>第四种，也是最复杂的，就是 position 为 absolute，它的包含块就是离它最近的定位元素，如果没有定位元素，那包含块其实就是初始包含块，分为以下几种情况</p><ul><li><p>最近的定位属性是行内元素</p><ul><li><p>如果最近的定位元素的 direction 属性为 ltr（内容从左往右显示），那么包含块的范围就是这个行内元素顶左的 padding 的外边界（border 的内边界）到底右的 padding 的外边界</p></li><li><p>```javascript<br><p style="border:1px solid red; width:200px; padding:20px;"><br>  T<br>  <span style="background-color:#C0C0C0; position:relative;"></p><pre><code>这段文字从左向右排列，红 XX 和 蓝 XX 和黄 XX 都是绝对定位元素，它的包含块是相对定位的SPAN。 可以通过它们绝对定位的位置来判断它们包含块的边缘。&lt;em style=&quot;position:absolute; color:red; top:0; left:0;&quot;&gt;XX&lt;/em&gt;&lt;em style=&quot;position:absolute; color:yellow; top:20px; left:0;&quot;&gt;XX&lt;/em&gt;&lt;em style=&quot;position:absolute; color:blue; bottom:0; right:0;&quot;&gt;XX&lt;/em&gt;</code></pre><p>  &lt;/span&gt;<br>&lt;/p&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 通过上面代码就可以看出</span><br><span class="line"></span><br><span class="line">- 如果最近的定位元素的 direction 属性是 rtl，那么包含块的范围就是这个行内元素的顶右的 padding 外边界到底左的 padding 外边界</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  &lt;p style=&quot;border:1px solid red; width:200px; padding:20px; direction:rtl;&quot;&gt;</span><br><span class="line">    T</span><br><span class="line">    &lt;span style=&quot;background-color:#C0C0C0; position:relative;&quot;&gt;</span><br><span class="line">      这段文字从右向左排列，红 XX 和 蓝 XX 和黄 XX 都是绝对定位元素，它的包含块是相对定位的SPAN。 可以通过它们绝对定位的位置来判断它们……</span><br><span class="line">      &lt;em style=&quot;position:absolute; color:red; top:0; left:0;&quot;&gt;XX&lt;/em&gt;</span><br><span class="line">      &lt;em style=&quot;position:absolute; color:yellow; top:20px; left:0;&quot;&gt;XX&lt;/em&gt;</span><br><span class="line">      &lt;em style=&quot;position:absolute; color:blue; bottom:0; right:0;&quot;&gt;XX&lt;/em&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>其实还有一种奇怪一点的情况，当 direction 为 ltr 时，会不会顶左在底右的右边，那么这个包含块不就是个负的范围了吗</p></li><li><p>```javascript<br><p style="border:1px solid red; width:200px; padding:20px;"><br>  TEXT TEXT TEXT<br>  <span style="background-color:#C0C0C0; position:relative;"></p><pre><code>这段文字从左向右排列，红 XX 和 蓝 XX 和黄 XX 都是绝对定位元素，它的包含块是相对定位的SPAN。 可以通过它们绝对定位的位置来判断它们包含块的边缘。&lt;em style=&quot;position:absolute; color:red; top:0; left:0;&quot;&gt;XX&lt;/em&gt;&lt;em style=&quot;position:absolute; color:yellow; top:20px; left:0;&quot;&gt;XX&lt;/em&gt;&lt;em style=&quot;position:absolute; color:blue; bottom:0; right:0;&quot;&gt;XX&lt;/em&gt;</code></pre><p>  &lt;/span&gt;<br>&lt;/p&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这时 top：0，left：0 还是在顶左开始摆放的，但是 bottom：0，right：0，并没有在预期的底右开始摆放，而是在底左开始摆放的</span><br><span class="line"></span><br><span class="line">- 最近的定位属性不是行内元素（也就是正常的块级元素）</span><br><span class="line"></span><br><span class="line">  - 当这个最近的定位元素不是行内元素时，就很简单了，那么包含块范围就是这个定位元素的 padding 的外边界</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    &lt;div id=”container” style=&quot;padding:50px; background-color:#c0c0c0; position:relative; width:200px; height:200px;&quot;&gt;</span><br><span class="line">        &lt;div id=”div1” style=&quot;width:100%;height:100%;border:2px solid blue;&quot;&gt;</span><br><span class="line">                   &lt;div id=”content” style=&quot;border:1px solid red; position:absolute; left:0; top:0;&quot;&gt;absolute element&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="grid-布局理解"><a href="#grid-布局理解" class="headerlink" title="grid 布局理解"></a>grid 布局理解</h3><ul><li><p>grid 布局跟 flex 布局相似，也是以容器（container）和项目（item）来规定布局，但是相比 flex，grid 的有更强大的能力来控制 item 的位置以及大小</p></li><li><p>开启 grid 布局</p><ul><li>在父元素设置 display: grid;属性，就为盒子开启了 grid 布局，此时设置 display 属性的盒子就是 container</li></ul></li><li><p>容器属性</p><ul><li><p>grid-template-columns 和 grid-template-rows</p><ul><li><p>两个属性用来定义每一列和每一行的宽度和高度的</p></li><li><p>```css<br>.container {<br>  display: grid;<br>  grid-template-columns: 100px 100px 100px;<br>  grid-template-rows: 100px 100px 100px;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 上面的代码就表示，盒子内部将会有三行三列的排列，并且宽度和高度都是 100px</span><br><span class="line"></span><br><span class="line">- 除了填写值，还可以使用其他的一些参数</span><br><span class="line"></span><br><span class="line">- repeat()可以指定重复的次数和值，如 repeat(3, 100px)，就可以简写上面的三次 100px，如果是 repeat(3, 10px 20px)，代表重复 10px 和 20px 两次</span><br><span class="line"></span><br><span class="line">- auto-fill 关键字，用在 repeat 的第一个属性，代表长度不固定，直到把行和列填满为止才换行，如 grid-template-columns: repeat(auto-fill, 100px)代表列数不确定，每列宽度为 100px，直到把容器填满为止，才换行</span><br><span class="line"></span><br><span class="line">- fr 关键字，用于表达每列或每行的相对宽度比例</span><br><span class="line"></span><br><span class="line">- minmax()，用于表示在一个范围内取值，如 minmax(100px, 200px)，表示在 100px 和 200px 之间自由调整</span><br><span class="line"></span><br><span class="line">- auto 关键字，自动调整宽度或高度，一般默认会调整到最大值</span><br><span class="line"></span><br><span class="line">- 指定网格线名称，一般在设置这两个属性的时候，还可以指定网格线的名称</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];</span><br><span class="line">    grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>以上就指定了行上和列上网格线的对应名称，在指定行跨度和列跨度属性的时候可以用到这些网格线的名称</p></li></ul></li><li><p>grid-row-gap、grid-column-gap 和 grid-gap</p><ul><li>代表行之间和列之间的间距</li><li>grid-gap 即前面两个属性的缩写，第一个属性是 row-gap，第二个是 column-gap</li><li>最新的标准中删除了这三个属性的前缀<strong>grid-</strong></li></ul></li><li><p>grid-template-areas</p><ul><li><p>用于指定布局时网格的名称</p></li><li><p>```css<br>.container {<br>  display: grid;<br>  grid-template-columns: 100px 100px 100px;<br>  grid-template-rows: 100px 100px 100px;<br>  grid-template-areas:</p><pre><code>&#39;a b c&#39;&#39;d e f&#39;&#39;g h i&#39;;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 此时就为布局的 9 个网格指定了 a-i 的名称，后续对 item 的定位属性也会使用到这些网格的命名</span><br><span class="line"></span><br><span class="line">    - 这些命名也会影响到网格线的命名，如区域的起始网格线就会命名为**区域名-start**，如 a 区域的起始网格线名称为 a-start</span><br><span class="line"></span><br><span class="line">  - grid-auto-flow</span><br><span class="line"></span><br><span class="line">    - 用于指定 item 的优先排列方向</span><br><span class="line">    - 默认为 row，即优先在行上排列</span><br><span class="line">    - 设置为 column 即优先在列上排列</span><br><span class="line">    - 在 row 或 column 后面还可以加上 dense，代表稠密布局，有时在设置了单元格跨度后，会留下一些空白，默认可能不会填充这些空白，如果使用了 dense 属性后，浏览器就会尽可能的紧密布局</span><br><span class="line"></span><br><span class="line">  - justify-items、align-items 和 place-items</span><br><span class="line"></span><br><span class="line">    - 用于设置单元格内的布局方向</span><br><span class="line">    - 可选属性有 start、end、center、stretch，默认为 stretch</span><br><span class="line">    - place-items 是前两个属性的缩写，第一个代表 align-items</span><br><span class="line"></span><br><span class="line">  - justify-content、align-content 和 place-content</span><br><span class="line"></span><br><span class="line">    - 用于设置单元格在容器内的布局方向，和 flex 相似</span><br><span class="line">    - 属性有 start、end、center、stretch、space-around、space-between、space-evenly</span><br><span class="line">    - 同样 place-content 也是两个属性的简写</span><br><span class="line"></span><br><span class="line">  - grid-auto-columns 和 grid-auto-rows</span><br><span class="line"></span><br><span class="line">    - 有时单元格会超出预先设置的单元格行数和列数，这时单元格的高度和宽度可能会不确定，此时就可以通过这两个属性来指定超出的单元格的高度和宽度</span><br><span class="line"></span><br><span class="line">  - grid-template 和 grid 属性</span><br><span class="line"></span><br><span class="line">    - grid-template 是 grid-template-rows、grid-template-columns 和 grid-template-areas 属性的缩写</span><br><span class="line">    - grid 则是 grid-template-rows、grid-template-columns、grid-template-areas、grid-auto-rows、grid-auto-columns 和 grid-auto-flow 这 6 个属性的缩写</span><br><span class="line"></span><br><span class="line">- 项目（item）属性</span><br><span class="line"></span><br><span class="line">  - grid-column-start、grid-column-end、grid-row-start 和 grid-row-end</span><br><span class="line"></span><br><span class="line">    - 指定属性的 4 个边框，分别定位到哪一根网格线</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      grid-column-start属性：左边框所在的垂直网格线</span><br><span class="line">      grid-column-end属性：右边框所在的垂直网格线</span><br><span class="line">      grid-row-start属性：上边框所在的水平网格线</span><br><span class="line">      grid-row-end属性：下边框所在的水平网格线</span><br></pre></td></tr></table></figure></li><li><p>```<br>.item-1 {<br>  grid-column-start: 1;<br>  grid-column-end: 3;<br>  grid-row-start: 1;<br>  grid-row-end: 3;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 以上代码表示，代码占据了起始一个 2x2 的区域</span><br><span class="line"></span><br><span class="line">  - 处理可以使用数值代表网格线之外，还可以使用 areas 中指定的单元格名称对应的网格线名称</span><br><span class="line"></span><br><span class="line">  - 还可以使用 span 数值，来表示单元格个跨度，如 grid-column-start: span 2，表示单元格占据 2 列，在 grid-column-start 和 grid-column-end 中使用 span 的效果是一样的</span><br><span class="line"></span><br><span class="line">- grid-column 和 grid-row</span><br><span class="line"></span><br><span class="line">  - 分别是 grid-column-start、grid-column-end 和 grid-row-start、grid-row-end 属性的缩写</span><br><span class="line"></span><br><span class="line">  - ```css</span><br><span class="line">    .item &#123;</span><br><span class="line">      grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">      grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    .item-1 &#123;</span><br><span class="line">      grid-column: 1 / 3;</span><br><span class="line">      grid-row: 1 / 2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>以上是缩写的格式，需要用/隔开每个属性</p></li></ul></li><li><p>grid-area</p><ul><li><p>可以用于指定单元格位于哪一个命名区域</p></li><li><p>```css<br>.item-1 {<br>  grid-area: e;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 以上代码就指定了单元格存在于之前命名为 e 的区域</span><br><span class="line"></span><br><span class="line">- 如果不指定命名区域，还可作为之前的 start 和 end 使用</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  .item &#123;</span><br><span class="line">    grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  .item-1 &#123;</span><br><span class="line">    grid-area: 1 / 1 / 3 / 3;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>以上代码就分别指定了 row-start、column-start、row-end、column-end 属性，并且属性之间用/分隔</p></li></ul></li><li><p>justify-self、align-self 和 place-self</p><ul><li>用于指定当前单元格内部的布局方向，和 justify-items 的属性一样，但是只会作用于当前的单元格</li><li>同样 place-self 是前两个属性的简写</li></ul></li></ul></li></ul><h3 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h3><ul><li>层叠上下文就像是一个外壳，它代表着一个层叠的区域，层叠上下文元素默认就比普通的元素要高一级</li><li>在页面布局时，元素难免会出现层叠的问题，但是出现层叠后，如何来确定谁在上面谁在下面呢</li><li>这时就有重要的两个名词，层叠等级和层叠顺序</li><li>层叠等级顾名思义，描述的就是元素在 z 轴上的上下关系，但是不能把所有元素都归为一类，因为只有当元素在同一个层叠上下文时，它们的比较才是有意义的，所以比较层叠等级只会在同一个层叠上下文中去比较，而对于普通元素来说，我们应该比较它们所处在的层叠上下文的等级</li><li>层叠顺序则指的是比较层叠等级的一种规则，这个规则就规定了当元素发生层叠时，谁应该在上面，谁应该在下面，在不考虑 CSS3 的情况向下，规则如下图所示<ul><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODcyMDM1OC0xMjlhMmMzMWIyN2Y3YzU1LnBuZw" alt=""></li><li>其中层叠上下文 background/border 指的是对于一个元素来讲，它所处的层叠上下文的 background/border 是层叠等级最低的，所以就是为什么默认情况下看到的嵌套内的元素会覆盖嵌套外的元素</li><li>而对于 inline/inline-block 的等级为什么这么高，因为这种元素本身用于包含文本，而文本是网页的主要内容，所以应该居于上方</li></ul></li><li>层叠上下文的产生<ul><li>默认情况下，根元素会创建默认的根层叠上下文，也就是我们的 html 元素就是根层叠上下文</li><li>普通的元素在设置定位属性之后（不为 static），并且设置 z-index 属性（不为 auto），这时就会为这个元素创建层叠上下文，并且这个元素会变成层叠上下文元素，意思就是它会比普通的元素高出一个等级</li><li>在 CSS3 中使用一些属性也会产生层叠上下文<ul><li>使用<code>display: flex</code>，并且其子元素设置了<code>z-index</code>，此时子元素就会创建层叠上下文</li><li>当<code>opacity</code>不为<code>1</code>时</li><li>当<code>transform</code>不为<code>none</code>时</li><li>当<code>mix-blend-mode</code>不为<code>normal</code>时</li><li>当<code>filter</code>不为<code>none</code>时</li><li>当<code>isolation</code>的值不是<code>isolate</code>时</li><li>当<code>will-change</code>属性是以上几个属性时</li><li>当<code>-webkit-overflow-scrolling</code>属性值设置为<code>touch</code></li></ul></li></ul></li><li>比较层叠关系的方法<ul><li>如果两个元素处于同一个层叠上下文中，那么就比较它们的层叠等级，可以根据层叠顺序图来进行比较</li><li>如果两个元素不处在同一个层叠上下文中，那么需要比较它们所处的层叠上下文，如果层叠等级相同，那么就比较它们在 DOM 中出现的顺序，谁后出现谁就在上面</li></ul></li></ul><h2 id="5-Vue-js-基础"><a href="#5-Vue-js-基础" class="headerlink" title="5.Vue.js 基础"></a>5.Vue.js 基础</h2><h3 id="Vue-有哪些生命周期"><a href="#Vue-有哪些生命周期" class="headerlink" title="Vue 有哪些生命周期"></a>Vue 有哪些生命周期</h3><ul><li><code>beforeCreate()</code> 在实例创建之间执行，数据未加载状态</li><li><p><code>created()</code> 在实例创建、数据加载后，能初始化数据，<code>dom</code>渲染之前执行</p></li><li><p><code>beforeMount()</code> 虚拟<code>dom</code>已创建完成，在数据渲染前最后一次更改数据</p></li><li><p><code>mounted()</code> 页面、数据渲染完成，真实<code>dom</code>挂载完成</p></li><li><p><code>beforeUpadate()</code> 重新渲染之前触发</p></li><li><p><code>updated()</code> 数据已经更改完成，<code>dom</code> 也重新 <code>render</code> 完成,更改数据会陷入死循环</p></li><li><p><code>beforeDestory()</code> 和 <code>destoryed()</code> 前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行</p></li></ul><h3 id="一般在哪个生命周期请求异步数据"><a href="#一般在哪个生命周期请求异步数据" class="headerlink" title="一般在哪个生命周期请求异步数据"></a>一般在哪个生命周期请求异步数据</h3><ul><li>异步请求在哪个阶段都可以调用，因为会先执行完生命周期的钩子函数之后，才会执行异步函数，但如果考虑用户体验方面的话，在 created 中调用异步请求最佳，用户就越早感知页面的已加载，毕竟越早获取数据，在 mounted 实例挂载的时候就越及时。</li></ul><h3 id="v-if-和-v-show-的差别"><a href="#v-if-和-v-show-的差别" class="headerlink" title="v-if 和 v-show 的差别"></a>v-if 和 v-show 的差别</h3><ul><li><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none”</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p></li></ul><h3 id="vue-的-nextTick-有什么用？"><a href="#vue-的-nextTick-有什么用？" class="headerlink" title="vue 的 nextTick 有什么用？"></a>vue 的 nextTick 有什么用？</h3><ul><li>作用是在下一次 DOM 更新循环结束后调用指定的回调函数。</li><li>因为 Vue 中更改数据后，对应的 DOM 并不是同步更新的，而是放在了 DOM 更新队列中进行异步更新，所以在修改完数据之后，DOM 其实还没有改变，如果这时我们想要获取 DOM 的话，是无法获取的，所有只有使用 nextTick 提供的回调函数对改变后的 DOM 进行获取。</li><li>实现原理<ul><li>因为 vue 对 dom 更新进行异步管理，会将这一轮的 dom 更新任务添加到本轮事件循环的微任务中，然后 nextTick 就会将回调函数以微任务的形式添加到微任务的尾部，因为 ui 渲染会在本轮所有微任务执行完之后才进行，所以 nextTick 函数能以最快的速度获得到更新后的 dom（因为 dom 更新对于浏览器来说其实是同步的，而 ui 渲染会等待，而不是立即渲染）</li></ul></li></ul><h3 id="v-for-中-key-的作用"><a href="#v-for-中-key-的作用" class="headerlink" title="v-for 中 key 的作用"></a>v-for 中 key 的作用</h3><ul><li>key 用来唯一标识一个元素</li><li>因为 v-for 根据数据进行渲染，如果数据改变，那么就会导致虚拟 dom 重新构建，然后经过 diff 算法后渲染改变的视图，如果没有 key 属性，如果在一组数据中间插入了一个新数据，那么就会导致从这个新数据开始，全部的元素都会被替换，因为虚拟 dom 没有途径来判断剩下的元素是否改变，所以就只能替换</li><li>但是如果有 key 的标识，那么虚拟 dom 在判断时，只用判断 key，就能很轻松的判断出这组数据中改变了哪个位置，然后找到对应的位置，对真实 dom 进行重新渲染</li></ul><h3 id="vue-事件监听的修饰符"><a href="#vue-事件监听的修饰符" class="headerlink" title="vue 事件监听的修饰符"></a>vue 事件监听的修饰符</h3><ul><li>stop：阻止事件的冒泡行为</li><li>prevent：阻止事件对于浏览器的默认行为</li><li>once：让事件只会触发一次</li><li>self：只有自身能触发事件，通过捕获或者冒泡都不会触发</li></ul><h3 id="proxy-和-Object-defineProperty-的区别"><a href="#proxy-和-Object-defineProperty-的区别" class="headerlink" title="proxy 和 Object.defineProperty 的区别"></a>proxy 和 Object.defineProperty 的区别</h3><ul><li>proxy 是对于对象进行拦截，而 defineProperty 是对对象的属性进行拦截</li><li>proxy 可以监听到对象的增加，还可以监听到对象的删除</li><li>proxy 可以监听对数组的操作，但 defineProperty 不行</li><li>proxy 是 es6 的语法，defineProperty 是 IE8+支持的</li></ul><h3 id="computed-和-watch-的区别"><a href="#computed-和-watch-的区别" class="headerlink" title="computed 和 watch 的区别"></a>computed 和 watch 的区别</h3><ul><li>computed 计算属性，用于添加一个属性，依赖于其他属性，当依赖属性改变时，计算属性也会随之改变，并且同时更新视图<ul><li>支持缓存，只有依赖值改变时才会改变（意思是不会重复计算）</li><li>不支持异步操作，因为计算属性会直接同步返回对应的计算出来的值</li><li>如果为 computed 设置一个函数，则函数作为取值函数 get，如果设置一个对象，则可以在对象中设置两个属性，一个取值函数 get，一个赋值函数 set</li></ul></li><li>watch 用于监听某个属性的改变，执行相应的操作<ul><li>不支持缓存，当监听的数据改变时，直接触发相应的操作</li><li>支持异步操作，当监听的属性改变时，可以进行想要的操作，如异步更改数据等等</li><li>为 watch 设置一个函数时，则属性改变时直接触发该函数，为 watch 设置一个对象时，可以设置 deep 属性，用于深度监听（当监听的属性是一个对象时，可以监听对象内部的改变，但是不能监听数组内部的改变），还有一个属性 handler 就是处理函数</li></ul></li></ul><h2 id="6-Vue-js-原理性问题"><a href="#6-Vue-js-原理性问题" class="headerlink" title="6.Vue.js 原理性问题"></a>6.Vue.js 原理性问题</h2><h2 id="7-计算机网络"><a href="#7-计算机网络" class="headerlink" title="7.计算机网络"></a>7.计算机网络</h2><h3 id="HTTP-常见状态码"><a href="#HTTP-常见状态码" class="headerlink" title="HTTP 常见状态码"></a>HTTP 常见状态码</h3><ul><li><p>|     | 类别                             | 原因短语                   |<br>| —- | ———————————————— | ————————————— |<br>| 1xx | Information（信息状态码）        | 接受的请求正在处理         |<br>| 2xx | Success（成功状态码）            | 请求正常处理完毕           |<br>| 3xx | Redirection（重定向状态码）      | 需要进行附加操作以完成请求 |<br>| 4xx | Client Error（客户端错误状态码） | 服务器无法处理请求         |<br>| 5xx | Server Error（服务端错误状态码） | 服务器处理请求出错         |</p></li><li><p>200 OK</p><ul><li>200 表示请求在服务器端被正常处理了。在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。</li></ul></li><li><p>204 No Content</p><ul><li><p>204 表示服务器接收的请求已经成功处理，但是在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。当浏览器在发送请求后接收到 204 响应，它的显示页面不会发生更新。</p></li><li><p>通常应用在只需要客户端往服务端发送信息，而服务端不需要发送新信息的情况下使用。</p></li></ul></li><li><p>206 Partial Content</p><ul><li>206 表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文内包含由 Content-Range 指定范围的实体内容。</li></ul></li><li><p>301 Moved Permanently</p><ul><li>永久重定向，301 状态码表示请求的资源已经分配了新的 URI，以后请求该资源应该访问新的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</li></ul></li><li><p>302 Found</p><ul><li>临时重定向，302 表示请求的资源已经被分配了新的 URI，希望客户端本次能使用新的 URI 访问。和 301 不同的是，这种资源的 URI 变更是临时的额，而不是永久的，因此不用去更新书签。</li></ul></li><li><p>303 See Other</p><ul><li><p>该状态码和 302 有着异曲同工之妙，表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</p></li><li><p>如果浏览器原本是用 POST 方法去请求服务器，收到 303 状态码之后，会改用 GET 并访问资源新的 URI。</p></li></ul></li><li><p>304 Not Modified</p><ul><li><p>304 状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。例如，客户端请求的资源在客户端本地已有缓存，会在请求头部中加入“If-Modified-Since”, “If-None-Match”等字段，服务端根据这些字段信息判断这些资源信息是否经过修改，如果没有则返回 304 状态码，客户端可以直接使用缓存中的资源。</p></li><li><p>304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p></li><li><p>PS：附带条件的请求是指采用 GET 方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</p></li></ul></li><li><p>307 Temporary Redirect</p><ul><li>临时重定向，和 302 Found 状态码有相同的含义。区别在于 307 不会强制浏览器将 POST 方法改为 GET 方法，而是遵循浏览器自身的标准。</li></ul></li><li><p>400 Bad Request</p><ul><li>400 状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</li><li>表示客户端发送的数据格式与服务器期望的数据格式不匹配</li></ul></li><li><p>401 Unauthorized</p><ul><li>401 状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。第一次收到 401 状态码表示需要进行用户认证，第二次再收到 401 状态码说明用户认证失败。</li></ul></li><li><p>403 Forbidden</p><ul><li>403 状态码表明对请求资源的访问被服务器拒绝了，当未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能发生 403 。</li></ul></li><li><p>404 Not Found</p><ul><li>404 是我们最常见的状态码之一，它表示服务器上无法找到请求资源。此外，也可能是服务器端在拒绝请求且不想说明原因的时候使用。</li></ul></li><li><p>500 Internal Server Error</p><ul><li>500 状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</li></ul></li><li><p>503 Service Unavailable</p><ul><li>503 状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul></li></ul><h3 id="TCP-建立连接三次握手，为什么？"><a href="#TCP-建立连接三次握手，为什么？" class="headerlink" title="TCP 建立连接三次握手，为什么？"></a>TCP 建立连接三次握手，为什么？</h3><ul><li>第一次客户端向服务器发起请求，此时双方都还不能确定是否对方已收到自己的消息</li><li>第二次服务器回复客户端第一次发起的请求，此时客户端可以确定服务器已经收到了自己的消息，但服务器还不能确定客户端已经收到了消息。</li><li>第三次客户端再回复一次服务器的请求，此时客户端和服务器都得到了一次确定，因此可以建立连接，进行数据的传输。</li><li>为什么要三次，如果是两次会发生什么？<ul><li>如果是两次，可能出现这种情况。客户端向服务器发起了连接请求，但是这个连接请求在网络中延迟了，因此客户端在等待一段时间后，发现服务器没有对它进行响应，因此就放弃了本次连接。</li><li>但在网络延迟后，数据到达了服务器，服务器以为是客户端向他请求的一个有效连接，如果是两次握手，那么此时服务器就会与客户端建立起连接，但这个连接其实是无效的，因为客户端其实已经放弃了本次连接，所以会导致服务器等待客户端发送消息，因此就在服务器中占用了不必要的资源。</li></ul></li></ul><h3 id="TCP-断开连接的四次挥手，为什么？"><a href="#TCP-断开连接的四次挥手，为什么？" class="headerlink" title="TCP 断开连接的四次挥手，为什么？"></a>TCP 断开连接的四次挥手，为什么？</h3><ul><li>第一次是客户端向服务端发起关闭的请求，这代表客户端已经没有数据要发送了，但是此时其实客户端还可以接收数据</li><li>第二次是服务器收到消息后，得知了客户端不发送消息了，因为就回复客户端，已经收到关闭请求，此时服务器端就会关闭自己的接收通道，客户端收到消息后也会关闭它的发送通道，但是此时服务器可能还有消息在发，所以并没关闭自己的发送通道，客户端也没有关闭接收通道</li><li>第三次，当服务端的消息发送完毕后，就会再次通知客户端，消息已经发送完毕了，可以关闭你的接收通道了</li><li>第四次是客户端接收到服务器的关闭请求后，然后告知服务端已经收到了关闭的请求，这时客户端就可以关闭消息接收通道，服务端收到消息后也会对应的关闭最后的消息发送通道</li></ul><h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><ul><li>TCP 是面向连接的，提供有序、无差错、不重复、数据重传、拥塞控制等机制</li><li>UDP 是无连接传输，所以 UDP 只能尽最大努力交付</li><li>因此 TCP 是可靠的传输协议，UDP 是不可靠的</li></ul><h3 id="TCP-是如何保证可靠传输的"><a href="#TCP-是如何保证可靠传输的" class="headerlink" title="TCP 是如何保证可靠传输的"></a>TCP 是如何保证可靠传输的</h3><ul><li>TCP 通过确认和重传、流量控制、拥塞控制保证传输的可靠性</li><li>滑动窗口原理（用于流量控制）<ul><li>首先为发送方和接收方分别创建发送窗口和接收窗口</li><li>发送方最先会向接收方请求发送数据，接收方便会返回一个带有<strong>确认号</strong>和<strong>窗口值</strong>的报文段给发送方，<strong>确认号</strong>表示发送方可以发送起始数据编号和接收方期望收到数据的数据编号，<strong>窗口值</strong>表示当前可发送和可接收编号的长度</li><li>此时发送方就可发送窗口内的所有数据给接收方，接收方收到数据后，会将收到的数据放在窗口缓存中（当然这些数据是允许接收的，也就是接收窗口内允许的数据），当收到的数据形成了从窗口尾部开始的连续数据，就会将本段连续数据的<strong>最大编号+1</strong>作为确认号，作为确认回复给发送方，此时发送方就是按照确认号和窗口值，对发送窗口进行调整，同样接收方也会对接收窗口进行调整</li><li>如果发送的数据在指定的时间内没有得到确认，那么将会对数据进行重传，以保证传输的可靠性</li></ul></li><li>拥塞控制算法<ul><li>四种情况：慢开始、拥塞避免、快重传、快恢复</li><li>ssthresh 为门限值，cwnd 为当前窗口大小</li><li>最初 cwnd 窗口大小为 1，当窗口大小未达到门限值的时候，采用慢开始算法，即进行指数增长</li><li>当窗口值到达门限值后，开始采用拥塞避免算法，即线性增长，每次+1</li><li>如果在增加窗口大小的过程中，出现了网络拥塞，则会将 cwnd 重新设置为 1，并且将门限值修改为当前出现拥塞的 cwnd 的一半，之后继续按照规则进行</li><li>在发送的过程中，可能会收到 3 个重复的确认，称为 3ack，这是便执行快重传算法，即将 cwnd 的值设置为当前 cwnd 的一半，把门限值 ssthresh 也设置为当前 cwnd 的一半，然后就开始快恢复算法，其实快恢复算法就跟拥塞避免一样，让 cwnd 进行线性增长，即每次+1</li></ul></li></ul><h2 id="8-计算机操作系统"><a href="#8-计算机操作系统" class="headerlink" title="8.计算机操作系统"></a>8.计算机操作系统</h2><h2 id="9-浏览器安全"><a href="#9-浏览器安全" class="headerlink" title="9. 浏览器安全"></a>9. 浏览器安全</h2><h4 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h4><p>xss 攻击就是在用户网页中插入恶意的代码，使得恶意代码被执行，从而对用户的网站造成攻击</p><p>xss 攻击的两种类型：#</p><p>反射型：</p><p>指非持久性的 xss 攻击，比如用户的页面要显示一个信息，但是这个信息的内容可以通过浏览器的 url 传递过来，然后直接把传递过来的某个参数直接渲染到页面上，这种情况，如果渲染的内容没有被过滤，直接渲染出 url 中包含的参数，那么攻击者就可以在这个参数中插入一段恶意的代码，使得参数被渲染到页面上时，被执行，从而造成攻击</p><p>存储型：</p><p>指持久性的 xss 攻击，如用户提交的表单内容，如果有一个表单内容被存储到数据库中，并且没有被过滤，在后续的网页中会使用到这个表单内容，并渲染到浏览器页面上，那么就可能存在 xss 攻击，当攻击者提交带有攻击性脚本的表单内容，那么在后续这段内容被渲染出来的时候，就会对网站造成攻击，因为是存储在数据库中的，该攻击可能会被触发无限多次，因此称为存储型 xss 攻击</p><p>xss 的注入点：</p><ol><li>html 的节点内容，即脚本被插入到 html 中</li><li>html 属性，如果图片的 src 属性，比如用户图片是通过拼接的方式形成的，那么就可以在图片链接中，通过截断图片链接的方式，然后在连接后面插入 onerror 回调，从而执行攻击者的代码</li><li>富文本中，富文本本身可以插入任意 html，因此造成攻击的可能会更大，不能简单的通过过滤字符来完成，而应该通过过滤掉潜在的标签和标签属性，来防止 xss 的攻击</li></ol><h4 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h4><p>主要是通过用户在 a 网站登录后，并将授权信息存储在 cookie 中，然后通过诱导用户去访问第三方网站 b，在网站 b 中有一个指向网站 a 的请求，浏览器判断用户是去访问网站 a，浏览器就在这条请求中携带上了网站 a 的 cookie，从而使第三方网站 b 可以利用网站 a 的授权，对网站 a 的用户造成攻击</p><p>防御的方式：</p><ol><li>通过 referer 请求头，判断发起请求的网站是否是自己的网站</li><li>通过 csrf token，可以在用户登录成功后，后端发送一个 csrf token，要求用户在请求中，都在请求头中带上这个 token，后端可以根据这个 token 的正确性，来保证请求是从我们自己的网站发出的</li><li>双 cookie 校验，可以在 http 请求头中加上一个自定义的字段，在字段中加入我们的 cookie，使得请求头中拥有两个 cookie，后端可以通过判断这两个 cookie 是否相等，从而判断请求是否从网站 a 发出</li></ol><h3 id="10-前端性能优化"><a href="#10-前端性能优化" class="headerlink" title="10.前端性能优化"></a>10.前端性能优化</h3><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>使用图片懒加载可以有效防止资源在不必使用时被加载出来，可以有效减少每次的请求次数，从而防止浏览器请求队头阻塞等情况</p><h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><p>可以使用 url-loader 对体积较小的图片进行 base64 编码，从而提高图片的加载速度，从而使得图片能跟 html 文件同时到达</p><p>还可以使用 image-webpack-loader 对图片进行压缩</p><h4 id="CDN-网络优化"><a href="#CDN-网络优化" class="headerlink" title="CDN 网络优化"></a>CDN 网络优化</h4><p>可以通过使用 CDN 资源，来对资源进行有效的缓存，从而加快对于资源的加载速度</p><p>在 index.html 中直接引入资源，如果使用了 webpack，可以配置 externals 选项，放置 cdn 资源被打包进入项目</p><h4 id="请求压缩优化-gzip"><a href="#请求压缩优化-gzip" class="headerlink" title="请求压缩优化 gzip"></a>请求压缩优化 gzip</h4><p>可以在服务端开启对于资源的 gzip 压缩，从而减小文件的体积，提高传输的速度</p><p>在打包项目时还能直接使用 compress-webpack-plugin 对资源进行 gzip 压缩，在服务端时就可以直接通过发送 gzip 文件，而减去压缩资源的时间</p><h4 id="项目字体优化"><a href="#项目字体优化" class="headerlink" title="项目字体优化"></a>项目字体优化</h4><p>可以适当使用工具删除字体中不需要的字体，如项目只有简体中文的文字，那么就可以删除其它没有必要的文字</p><p>如果对于项目中存在静态字体，那么就可以使用 font-spider 对静态字体进行提取，然后生成只包含静态字体的字体文件，从而减少字体文件的大小</p><h4 id="资源预加载与预取"><a href="#资源预加载与预取" class="headerlink" title="资源预加载与预取"></a>资源预加载与预取</h4><p>可以对页面中的核心资源进行 preload 预加载，从而在界面渲染出来的时候就能即使使用到资源</p><p>而对于一些当前不使用，但是即将可能使用的资源，可以使用 preload 预取，在浏览器空闲时就会对资源进行预取，从而在资源真正被使用时可以通过直接从缓存中获取</p><p>在一般项目中可以使用 preload-webpack-plugin 来使用对核心资源的预加载设置，从而在打包时配合 html-webpack-plugin 将资源插入到 html 文件中，还可以设置将指定资源进行 prefetch</p><p>在 vue-cli3 以上的脚手架中，会自动对初次渲染需要的核心内容进行 preload 预加载，对所有使用 import 函数引入的资源，即被 code splitting 的资源进行 prefetch 预取</p><h4 id="tree-shaking-优化"><a href="#tree-shaking-优化" class="headerlink" title="tree shaking 优化"></a>tree shaking 优化</h4><p>使用支持 tree shaking 的包，即使用 esm 规范开发的包文件</p><h4 id="应用预渲染"><a href="#应用预渲染" class="headerlink" title="应用预渲染"></a>应用预渲染</h4><p>可以使用 prerender-spa-plugin 对应用的必要页面进行预渲染，如果该页面中存在过多的静态资源，但是这些资源又是通过 js 渲染出来的，就可以通过预渲染，在编译阶段就将这些内容直接渲染成静态的代码，从而加快内容被渲染出来的速度</p><h4 id="原子化-css"><a href="#原子化-css" class="headerlink" title="原子化 css"></a>原子化 css</h4><p>可以有效防止 css 嵌套层数过多的问题，原子化 css 中定义很多可以被直接使用的类名，因此可以直接使用这些类名来编写 css 的样式，从而就避免了类名嵌套多层的情况出现</p><h4 id="如何衡量前端性能，性能指标"><a href="#如何衡量前端性能，性能指标" class="headerlink" title="如何衡量前端性能，性能指标"></a>如何衡量前端性能，性能指标</h4><p>首屏加载速度，FCP first contentful paint，首屏渲染的时间是第一个衡量前端性能的标准，即用户可以看到我们网页内容的时间，一般可以用通过浏览器的 lighthouse 工具，或者使用 js 的 preformance 来计算出首屏的时间</p><p>第二标准是 LCP，largest contentful paint，即页面中最大内容被绘制出来的时间</p><p>第三个标准 FID，first input delay，即用户第一次与页面交互浏览器响应交互需要的时间，即用户首次交互需要等待的时间，也可以衡量一个应用的性能</p><p>第四个标准 TTI，time to interactive，即页面中所有资源都能够进行响应的时间，即响应用户所有操作的时间点</p><p>—end</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>{"name":"封封の博客","short_name":"封封封","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts>.recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside>div>button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName('script'))[o.length - 1].getAttribute('data-injectcss'),    p = function (c, l) {      l.parentNode.insertBefore(c, l)    }  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0    try {      document.write('<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>')    } catch (c) {      console && console.log(c)    }  }  function d() {    i || ((i = !0), a())  }  function m() {    try {      t.documentElement.doScroll('left')    } catch (c) {      return void setTimeout(m, 50)    }    d()  }  ;(l = function () {    var c,      l = document.createElement('div')    ;(l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName('svg')[0]) && (l.setAttribute('aria-hidden', 'true'), (l.style.position = 'absolute'), (l.style.width = 0), (l.style.height = 0), (l.style.overflow = 'hidden'), (l = l), (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l))  }),    document.addEventListener      ? ~['complete', 'loaded', 'interactive'].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener('DOMContentLoaded', h, !1), l()          }),          document.addEventListener('DOMContentLoaded', h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          'complete' == t.readyState && ((t.onreadystatechange = null), d())        }))})(window)]]></content>
      
    </entry>
    
    
  
</search>
